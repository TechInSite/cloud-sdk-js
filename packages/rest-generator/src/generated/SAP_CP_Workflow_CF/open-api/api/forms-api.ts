/* tslint:disable */
/* eslint-disable */
/**
 * Workflow API for Cloud Foundry
 * This API uses the SAP Cloud Platform Workflow service. With the API, you can, for example, start new workflow instances and work with tasks.  Note (relevant only for SAP API Business Hub): For authentication purposes, the API uses OAuth 2.0 security (with JSON Web Token, JWT). Thus, \"Try Out\" only works with an explicitly configured environment. For more information on how to obtain the necessary parameters, please see [Determine Service Configuration Parameters](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/abb1f66b2c3b4983b6b656654cfc3d2b.html) in the documentation. The OAuth client you use must have [extended scopes](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/baf2847f6d1c401a83ca3a1427b8ff84.html).  Note: These APIs are designed for loosely coupled clients. This means:  - If workflow service adds fields to responses, the API version number does not increase. Your client must ignore new fields. - The order of fields in responses and of entries in arrays may change. This applies unless the API provides an explicit means to specify the desired order. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { FormMetadata } from '../model';
// @ts-ignore
import { FormModel } from '../model';
// @ts-ignore
import { TechnicalError } from '../model';
// @ts-ignore
import { UnauthorizedError } from '../model';
/**
 * FormsApi - axios parameter creator
 * @export
 */
export const FormsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Undeploys all versions of an existing form.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: FORM_DEFINITION_UNDEPLOY 
         * @summary Delete a form.
         * @param {string} formId The ID of the form you want to undeploy. The ID is at most 255 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsFormIdDelete: async (formId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            if (formId === null || formId === undefined) {
                throw new RequiredError('formId','Required parameter formId was null or undefined when calling v1FormsFormIdDelete.');
            }
            const localVarPath = `/v1/forms/{formId}`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the form model with the specified form ID and revision.  Roles permitted to execute this operation:  - Global roles (retrieve start and task forms): WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Global roles (retrieve start forms only): WorkflowInitiator  - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and revision.
         * @param {string} formId The ID of the form for which the model should be retrieved.
         * @param {string} revisionId The revision of the form for which the model should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsFormIdRevisionsRevisionIdModelGet: async (formId: string, revisionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            if (formId === null || formId === undefined) {
                throw new RequiredError('formId','Required parameter formId was null or undefined when calling v1FormsFormIdRevisionsRevisionIdModelGet.');
            }
            // verify required parameter 'revisionId' is not null or undefined
            if (revisionId === null || revisionId === undefined) {
                throw new RequiredError('revisionId','Required parameter revisionId was null or undefined when calling v1FormsFormIdRevisionsRevisionIdModelGet.');
            }
            const localVarPath = `/v1/forms/{formId}/revisions/{revisionId}/model`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)))
                .replace(`{${"revisionId"}}`, encodeURIComponent(String(revisionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the model of the specified version of the specified form definition.    Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin, WorkflowDeveloper   - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and version number.
         * @param {string} formId The form ID for which the model should be retrieved. The form definition ID is at most 255 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsFormIdVersionsVersionNumberModelGet: async (formId: string, versionNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            if (formId === null || formId === undefined) {
                throw new RequiredError('formId','Required parameter formId was null or undefined when calling v1FormsFormIdVersionsVersionNumberModelGet.');
            }
            // verify required parameter 'versionNumber' is not null or undefined
            if (versionNumber === null || versionNumber === undefined) {
                throw new RequiredError('versionNumber','Required parameter versionNumber was null or undefined when calling v1FormsFormIdVersionsVersionNumberModelGet.');
            }
            const localVarPath = `/v1/forms/{formId}/versions/{versionNumber}/model`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)))
                .replace(`{${"versionNumber"}}`, encodeURIComponent(String(versionNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of the latest version of each revision of each deployed form definition. The request can be parameterized.  The results are sorted by the \'createdAt\' attribute in descending order.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: FORM_DEFINITION_GET 
         * @summary Retrieve all form definitions
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the form definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {'start' | 'task'} [type] Specify whether the response should be filtered by the form type. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsGet: async ($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', type?: 'start' | 'task', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($inlinecount !== undefined) {
                localVarQueryParameter['$inlinecount'] = $inlinecount;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FormsApi - functional programming interface
 * @export
 */
export const FormsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Undeploys all versions of an existing form.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: FORM_DEFINITION_UNDEPLOY 
         * @summary Delete a form.
         * @param {string} formId The ID of the form you want to undeploy. The ID is at most 255 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FormsFormIdDelete(formId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await FormsApiAxiosParamCreator(configuration).v1FormsFormIdDelete(formId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the form model with the specified form ID and revision.  Roles permitted to execute this operation:  - Global roles (retrieve start and task forms): WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Global roles (retrieve start forms only): WorkflowInitiator  - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and revision.
         * @param {string} formId The ID of the form for which the model should be retrieved.
         * @param {string} revisionId The revision of the form for which the model should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FormsFormIdRevisionsRevisionIdModelGet(formId: string, revisionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormModel>> {
            const localVarAxiosArgs = await FormsApiAxiosParamCreator(configuration).v1FormsFormIdRevisionsRevisionIdModelGet(formId, revisionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the model of the specified version of the specified form definition.    Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin, WorkflowDeveloper   - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and version number.
         * @param {string} formId The form ID for which the model should be retrieved. The form definition ID is at most 255 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FormsFormIdVersionsVersionNumberModelGet(formId: string, versionNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormModel>> {
            const localVarAxiosArgs = await FormsApiAxiosParamCreator(configuration).v1FormsFormIdVersionsVersionNumberModelGet(formId, versionNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of the latest version of each revision of each deployed form definition. The request can be parameterized.  The results are sorted by the \'createdAt\' attribute in descending order.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: FORM_DEFINITION_GET 
         * @summary Retrieve all form definitions
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the form definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {'start' | 'task'} [type] Specify whether the response should be filtered by the form type. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FormsGet($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', type?: 'start' | 'task', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormMetadata>>> {
            const localVarAxiosArgs = await FormsApiAxiosParamCreator(configuration).v1FormsGet($skip, $top, $inlinecount, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FormsApi - factory interface
 * @export
 */
export const FormsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Undeploys all versions of an existing form.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: FORM_DEFINITION_UNDEPLOY 
         * @summary Delete a form.
         * @param {string} formId The ID of the form you want to undeploy. The ID is at most 255 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsFormIdDelete(formId: string, options?: any): AxiosPromise<void> {
            return FormsApiFp(configuration).v1FormsFormIdDelete(formId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the form model with the specified form ID and revision.  Roles permitted to execute this operation:  - Global roles (retrieve start and task forms): WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Global roles (retrieve start forms only): WorkflowInitiator  - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and revision.
         * @param {string} formId The ID of the form for which the model should be retrieved.
         * @param {string} revisionId The revision of the form for which the model should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsFormIdRevisionsRevisionIdModelGet(formId: string, revisionId: string, options?: any): AxiosPromise<FormModel> {
            return FormsApiFp(configuration).v1FormsFormIdRevisionsRevisionIdModelGet(formId, revisionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the model of the specified version of the specified form definition.    Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin, WorkflowDeveloper   - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and version number.
         * @param {string} formId The form ID for which the model should be retrieved. The form definition ID is at most 255 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsFormIdVersionsVersionNumberModelGet(formId: string, versionNumber: string, options?: any): AxiosPromise<FormModel> {
            return FormsApiFp(configuration).v1FormsFormIdVersionsVersionNumberModelGet(formId, versionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of the latest version of each revision of each deployed form definition. The request can be parameterized.  The results are sorted by the \'createdAt\' attribute in descending order.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: FORM_DEFINITION_GET 
         * @summary Retrieve all form definitions
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the form definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {'start' | 'task'} [type] Specify whether the response should be filtered by the form type. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsGet($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', type?: 'start' | 'task', options?: any): AxiosPromise<Array<FormMetadata>> {
            return FormsApiFp(configuration).v1FormsGet($skip, $top, $inlinecount, type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FormsApi - object-oriented interface
 * @export
 * @class FormsApi
 * @extends {BaseAPI}
 */
export class FormsApi extends BaseAPI {
    /**
     * Undeploys all versions of an existing form.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: FORM_DEFINITION_UNDEPLOY 
     * @summary Delete a form.
     * @param {string} formId The ID of the form you want to undeploy. The ID is at most 255 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    public v1FormsFormIdDelete(formId: string, options?: any) {
        return FormsApiFp(this.configuration).v1FormsFormIdDelete(formId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the form model with the specified form ID and revision.  Roles permitted to execute this operation:  - Global roles (retrieve start and task forms): WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Global roles (retrieve start forms only): WorkflowInitiator  - Scope: FORM_DEFINITION_GET_MODEL 
     * @summary Retrieve form model by ID and revision.
     * @param {string} formId The ID of the form for which the model should be retrieved.
     * @param {string} revisionId The revision of the form for which the model should be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    public v1FormsFormIdRevisionsRevisionIdModelGet(formId: string, revisionId: string, options?: any) {
        return FormsApiFp(this.configuration).v1FormsFormIdRevisionsRevisionIdModelGet(formId, revisionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the model of the specified version of the specified form definition.    Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin, WorkflowDeveloper   - Scope: FORM_DEFINITION_GET_MODEL 
     * @summary Retrieve form model by ID and version number.
     * @param {string} formId The form ID for which the model should be retrieved. The form definition ID is at most 255 characters long.
     * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    public v1FormsFormIdVersionsVersionNumberModelGet(formId: string, versionNumber: string, options?: any) {
        return FormsApiFp(this.configuration).v1FormsFormIdVersionsVersionNumberModelGet(formId, versionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of the latest version of each revision of each deployed form definition. The request can be parameterized.  The results are sorted by the \'createdAt\' attribute in descending order.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: FORM_DEFINITION_GET 
     * @summary Retrieve all form definitions
     * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
     * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
     * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the form definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
     * @param {'start' | 'task'} [type] Specify whether the response should be filtered by the form type. The values are case-sensitive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FormsApi
     */
    public v1FormsGet($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', type?: 'start' | 'task', options?: any) {
        return FormsApiFp(this.configuration).v1FormsGet($skip, $top, $inlinecount, type, options).then((request) => request(this.axios, this.basePath));
    }
}
