/* tslint:disable */
/* eslint-disable */
/**
 * Workflow API for Cloud Foundry
 * This API uses the SAP Cloud Platform Workflow service. With the API, you can, for example, start new workflow instances and work with tasks.  Note (relevant only for SAP API Business Hub): For authentication purposes, the API uses OAuth 2.0 security (with JSON Web Token, JWT). Thus, \"Try Out\" only works with an explicitly configured environment. For more information on how to obtain the necessary parameters, please see [Determine Service Configuration Parameters](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/abb1f66b2c3b4983b6b656654cfc3d2b.html) in the documentation. The OAuth client you use must have [extended scopes](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/baf2847f6d1c401a83ca3a1427b8ff84.html).  Note: These APIs are designed for loosely coupled clients. This means:  - If workflow service adds fields to responses, the API version number does not increase. Your client must ignore new fields. - The order of fields in responses and of entries in arrays may change. This applies unless the API provides an explicit means to specify the desired order. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AttachmentsContext } from '../model';
// @ts-ignore
import { ConflictError } from '../model';
// @ts-ignore
import { CustomAttribute } from '../model';
// @ts-ignore
import { TechnicalError } from '../model';
// @ts-ignore
import { UnauthorizedError } from '../model';
// @ts-ignore
import { WorkflowInstance } from '../model';
// @ts-ignore
import { WorkflowInstanceErrorMessage } from '../model';
// @ts-ignore
import { WorkflowInstanceExecutionLog } from '../model';
// @ts-ignore
import { WorkflowInstanceRoles } from '../model';
// @ts-ignore
import { WorkflowInstanceRolesUpdatePayload } from '../model';
// @ts-ignore
import { WorkflowInstanceStartPayload } from '../model';
// @ts-ignore
import { WorkflowInstanceUpdatePayload } from '../model';
// @ts-ignore
import { WorkflowInstancesUpdatePayload } from '../model';
/**
 * WorkflowInstancesApi - axios parameter creator
 * @export
 */
export const WorkflowInstancesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Retrieves workflow instances by parameters. If no parameters are specified, all RUNNING, or ERRONEOUS instances are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If multiple parameters are specified for the same attribute or a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not given.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET 
         * @summary Retrieve all instances by query parameters
         * @param {'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc'} [$orderby] The attribute and direction by which workflow instances are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. If sort by definitionVersion is enabled, then definitionId is also added to the sorting query. If not specified, the results are sorted by the \&#39;startedAt\&#39; attribute, in descending order.   * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * definitionId asc - Ascending, from A to Z case-sensitive.  * definitionId desc - Descending, from Z to A case-sensitive.  * definitionVersion asc - Ascending, from A to Z case-sensitive.  * definitionVersion desc - Descending, from Z to A case-sensitive.  * startedAt asc - Ascending, from A to Z case-sensitive.  * startedAt desc - Descending, from Z to A case-sensitive.  * completedAt asc - Ascending, workflow instance completion or cancelation time from the oldest to the most recent, not yet COMPLETED workflow instances first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED workflow instance to the oldest ones, not yet COMPLETED workflow instances last.  * startedBy asc - Ascending, from A to Z case-sensitive.  * startedBy desc - Descending, from Z to A case-sensitive.  * subject asc - Ascending, from A to Z case-sensitive, workflow instances without subject first.  * subject desc - Descending, from Z to A case-sensitive, workflow instances without subject last.  * businessKey asc - Ascending, from A to Z case-sensitive, workflow instances without business key first.  * businessKey desc - Descending, from Z to A case-sensitive, workflow instances without business key last.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow instances, which match the search criteria, should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. 
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {string} [id] Specify the workflow instance ID. The workflow instance ID is 36 characters long.
         * @param {string} [definitionId] Specify the ID of the workflow definition. The ID is at most 64 characters long.
         * @param {string} [definitionVersion] Specify the version of the workflow definition.
         * @param {'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED'} [status] Specify the status of the workflow instance. The values are not case-sensitive.
         * @param {string} [startedAt] Specify at what time the workflow instance was started. Supports two date formats 1) yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2) yyyyMMddHHmmss.SSS.
         * @param {string} [startedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedAt] Specify at what time the workflow instance was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS 
         * @param {string} [completedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedBy] Specify the user who started the workflow instance, in UTF-8 encoding. The user ID is at most 255 characters long.
         * @param {string} [subject] Specify the subject of the workflow instance, in UTF-8 encoding. The subject of a workflow instance is limited to 255 characters.
         * @param {string} [containsText] Specify the text to search for, in UTF-8 encoding. Searches the id, definitionId, subject, startedBy, and businessKey attributes of the workflow instances. The maximum length of these attributes is 255 characters. 
         * @param {string} [businessKey] Specify the business key of the workflow instance, in UTF-8 encoding. The business key of a workflow instance is limited to 255 characters.
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters workflow instances by the value of the custom workflow attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom workflow attributes with different IDs are present in the URL, only workflow instances which contain all of them with the values specified will be returned as a response to the request. If a query by custom workflow attributes matches too many workflow definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesGet: async ($orderby?: 'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', id?: string, definitionId?: string, definitionVersion?: string, status?: 'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED', startedAt?: string, startedFrom?: string, startedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, startedBy?: string, subject?: string, containsText?: string, businessKey?: string, attributesExampleCustomAttribute?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/workflow-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($inlinecount !== undefined) {
                localVarQueryParameter['$inlinecount'] = $inlinecount;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (definitionId !== undefined) {
                localVarQueryParameter['definitionId'] = definitionId;
            }

            if (definitionVersion !== undefined) {
                localVarQueryParameter['definitionVersion'] = definitionVersion;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startedAt !== undefined) {
                localVarQueryParameter['startedAt'] = startedAt;
            }

            if (startedFrom !== undefined) {
                localVarQueryParameter['startedFrom'] = startedFrom;
            }

            if (startedUpTo !== undefined) {
                localVarQueryParameter['startedUpTo'] = startedUpTo;
            }

            if (completedAt !== undefined) {
                localVarQueryParameter['completedAt'] = completedAt;
            }

            if (completedFrom !== undefined) {
                localVarQueryParameter['completedFrom'] = completedFrom;
            }

            if (completedUpTo !== undefined) {
                localVarQueryParameter['completedUpTo'] = completedUpTo;
            }

            if (startedBy !== undefined) {
                localVarQueryParameter['startedBy'] = startedBy;
            }

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (containsText !== undefined) {
                localVarQueryParameter['containsText'] = containsText;
            }

            if (businessKey !== undefined) {
                localVarQueryParameter['businessKey'] = businessKey;
            }

            if (attributesExampleCustomAttribute !== undefined) {
                localVarQueryParameter['attributes.ExampleCustomAttribute'] = attributesExampleCustomAttribute;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the given workflow instances according to the specified operations. Currently, the only operation supported is the deletion of workflow instances. You can at most specify 10000 instances to delete in one API call.  Roles permitted to execute this operation: - Global roles: WorkflowTenantOperator - Scope: WORKFLOW_INSTANCES_UPDATE
         * @summary Delete instance by ID
         * @param {Array<WorkflowInstancesUpdatePayload>} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesPatch: async (body: Array<WorkflowInstancesUpdatePayload>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1WorkflowInstancesPatch.');
            }
            const localVarPath = `/v1/workflow-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts a new workflow instance of the provided workflow definition. Specify the ID of the workflow definition in the body. The workflow instance automatically starts based on the latest deployed version of the definition.  Roles permitted to execute this operation:  - Global roles: WorkflowInitiator  - Scope: WORKFLOW_INSTANCE_START 
         * @summary Start a new instance
         * @param {WorkflowInstanceStartPayload} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesPost: async (body: WorkflowInstanceStartPayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1WorkflowInstancesPost.');
            }
            const localVarPath = `/v1/workflow-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the attachments information for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ATTACHMENTS
         * @summary Retrieve instance attachments
         * @param {string} workflowInstanceId The workflow instance ID for which the attachments should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/attachments`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Overrides the attachments information for a workflow instance independent of its status.  Take special care when using this API, because it will override the workflow attachments, that is, it might change the workflow   in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ATTACHMENTS
         * @summary Overwrite instance attachments
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the attachments should be overridden. The workflow instance ID is 36 characters long.
         * @param {AttachmentsContext} body Specify the new information according to the given schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut: async (workflowInstanceId: string, body: AttachmentsContext, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/attachments`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves custom workflow attributes for a workflow instance. Labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: WORKFLOW_INSTANCE_GET_ATTRIBUTES 
         * @summary Retrieve custom workflow attributes by workflow instance ID
         * @param {string} workflowInstanceId The ID of the workflow instance for which the custom workflow attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdAttributesGet: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdAttributesGet.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/attributes`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the workflow context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_CONTEXT
         * @summary Retrieve instance context
         * @param {string} workflowInstanceId The workflow instance ID for which the context should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdContextGet: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdContextGet.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/context`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies parts of the context for a workflow instance independent of its status.  Take special care when using this API, because it might change the workflow context in ways that are incompatible with the expectations  of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and make sure that  the execution has come to a halt, that is, that no further steps are being added to the execution log. Refer to PATCH on the parent resource  and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Update instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be modified. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the modified parts of the context. Note that the modification is limited by the allowed content length of the request body. The length is restricted to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdContextPatch: async (workflowInstanceId: string, body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdContextPatch.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdContextPatch.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/context`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Overrides the context for a workflow instance independent of its status.   Take special care when using this API, because it will override the workflow context, that is, it might change the workflow context  in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.  Refer to PATCH on the parent resource and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Overwrite instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be overridden. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the new context according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdContextPut: async (workflowInstanceId: string, body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdContextPut.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdContextPut.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/context`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves current error messages for a workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowDeveloper, WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ERROR_MESSAGES 
         * @summary Retrieve error messages
         * @param {string} workflowInstanceId The workflow instance ID for which the error messages should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/error-messages`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves execution logs for a given workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_EXECUTION_LOGS 
         * @summary Retrieve execution logs
         * @param {string} workflowInstanceId The workflow instance ID for which the execution logs should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/execution-logs`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the workflow instance with the specified workflow instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET
         * @summary Retrieve workflow instance by ID
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be retrieved. The workflow instance ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdGet: async (workflowInstanceId: string, $expand?: 'attributes', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdGet.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the properties of a given workflow instance, for example, sets its status to CANCELED or RUNNING.  Status change effects may not take effect immediately, due to asynchronous processing of the request. When you change the status to CANCELED, note the following:  * Workflow instances in CANCELED status are considered final, that is, no further changes are allowed. This is valid as well for other APIs and the processing according to the workflow definition.  * Workflow instances in CANCELED status stop processing as soon as the system allows.  When you are changing the status to SUSPENDED, note the following:  * Status SUSPENDED manually and temporarily suspends processing.  * Workflow instances in SUSPENDED status stop processing as soon as the system allows.  * Workflow instances remain in SUSPENDED status until a status change to RUNNING or CANCELED is requested.  * While the workflow instance status reported by the respective API might change with immediate effect, follow-up actions might only be successful, after asynchronous processing within the workflow instance actually has stopped. To check whether asynchronous processing is ongoing, analyze the execution logs or check the workflow definition structure.  When you are changing the status to RUNNING, note the following:  * For workflow instances in ERRONEOUS status, this retries the failed activities. If these activities continue failing, the workflow instance automatically moves again into ERRONEOUS status.  * If the workflow instance had previously been suspended while in ERRONEOUS status, failed activities, such as service tasks, are retried.   Roles permitted to execute this operation:  - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: WORKFLOW_INSTANCE_CANCEL, WORKFLOW_INSTANCE_RETRY_RESUME, WORKFLOW_INSTANCE_SUSPEND
         * @summary Update instance
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be modified. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceUpdatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdPatch: async (workflowInstanceId: string, body: WorkflowInstanceUpdatePayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdPatch.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdPatch.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the instance-specific role assignments of the given workflow instance.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ROLES 
         * @summary Retrieve instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the roles should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdRolesGet: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdRolesGet.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/roles`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the instance-specific role assignments of the given workflow instance.  Any of the role assignment properties that is present in the request body will overwrite the existing assignments with the new assignments. Any properties that are either null or not present at all in the request body will leave the corresponding role assignments unchanged.  The maximum number of users and groups that can be assigned to each role is limited to 100.  The use of expressions as part of the role assignments (e.g. ${context.variable}) is only allowed for workflow instances that are not yet COMPLETED or CANCELED.  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ROLES  Examples: - Setting **viewerUsers: \"UserId1, UserId8\"** will remove all existing user assignments of the viewer role and then assign   only the two specified users to the role. - Setting **viewerUsers: \"\"** will remove all existing user assignments of the viewer role. - Specifying any non-null **viewerUsers** in the request body and leaving out **viewerGroups** will update the user   assignments and leave the group assignments unchanged.
         * @summary Update instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the role assignments should be updated. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceRolesUpdatePayload} body Specify new role assignments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdRolesPatch: async (workflowInstanceId: string, body: WorkflowInstanceRolesUpdatePayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdRolesPatch.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdRolesPatch.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/roles`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WorkflowInstancesApi - functional programming interface
 * @export
 */
export const WorkflowInstancesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Retrieves workflow instances by parameters. If no parameters are specified, all RUNNING, or ERRONEOUS instances are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If multiple parameters are specified for the same attribute or a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not given.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET 
         * @summary Retrieve all instances by query parameters
         * @param {'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc'} [$orderby] The attribute and direction by which workflow instances are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. If sort by definitionVersion is enabled, then definitionId is also added to the sorting query. If not specified, the results are sorted by the \&#39;startedAt\&#39; attribute, in descending order.   * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * definitionId asc - Ascending, from A to Z case-sensitive.  * definitionId desc - Descending, from Z to A case-sensitive.  * definitionVersion asc - Ascending, from A to Z case-sensitive.  * definitionVersion desc - Descending, from Z to A case-sensitive.  * startedAt asc - Ascending, from A to Z case-sensitive.  * startedAt desc - Descending, from Z to A case-sensitive.  * completedAt asc - Ascending, workflow instance completion or cancelation time from the oldest to the most recent, not yet COMPLETED workflow instances first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED workflow instance to the oldest ones, not yet COMPLETED workflow instances last.  * startedBy asc - Ascending, from A to Z case-sensitive.  * startedBy desc - Descending, from Z to A case-sensitive.  * subject asc - Ascending, from A to Z case-sensitive, workflow instances without subject first.  * subject desc - Descending, from Z to A case-sensitive, workflow instances without subject last.  * businessKey asc - Ascending, from A to Z case-sensitive, workflow instances without business key first.  * businessKey desc - Descending, from Z to A case-sensitive, workflow instances without business key last.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow instances, which match the search criteria, should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. 
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {string} [id] Specify the workflow instance ID. The workflow instance ID is 36 characters long.
         * @param {string} [definitionId] Specify the ID of the workflow definition. The ID is at most 64 characters long.
         * @param {string} [definitionVersion] Specify the version of the workflow definition.
         * @param {'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED'} [status] Specify the status of the workflow instance. The values are not case-sensitive.
         * @param {string} [startedAt] Specify at what time the workflow instance was started. Supports two date formats 1) yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2) yyyyMMddHHmmss.SSS.
         * @param {string} [startedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedAt] Specify at what time the workflow instance was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS 
         * @param {string} [completedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedBy] Specify the user who started the workflow instance, in UTF-8 encoding. The user ID is at most 255 characters long.
         * @param {string} [subject] Specify the subject of the workflow instance, in UTF-8 encoding. The subject of a workflow instance is limited to 255 characters.
         * @param {string} [containsText] Specify the text to search for, in UTF-8 encoding. Searches the id, definitionId, subject, startedBy, and businessKey attributes of the workflow instances. The maximum length of these attributes is 255 characters. 
         * @param {string} [businessKey] Specify the business key of the workflow instance, in UTF-8 encoding. The business key of a workflow instance is limited to 255 characters.
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters workflow instances by the value of the custom workflow attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom workflow attributes with different IDs are present in the URL, only workflow instances which contain all of them with the values specified will be returned as a response to the request. If a query by custom workflow attributes matches too many workflow definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesGet($orderby?: 'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', id?: string, definitionId?: string, definitionVersion?: string, status?: 'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED', startedAt?: string, startedFrom?: string, startedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, startedBy?: string, subject?: string, containsText?: string, businessKey?: string, attributesExampleCustomAttribute?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowInstance>>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesGet($orderby, $skip, $top, $inlinecount, $expand, id, definitionId, definitionVersion, status, startedAt, startedFrom, startedUpTo, completedAt, completedFrom, completedUpTo, startedBy, subject, containsText, businessKey, attributesExampleCustomAttribute, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies the given workflow instances according to the specified operations. Currently, the only operation supported is the deletion of workflow instances. You can at most specify 10000 instances to delete in one API call.  Roles permitted to execute this operation: - Global roles: WorkflowTenantOperator - Scope: WORKFLOW_INSTANCES_UPDATE
         * @summary Delete instance by ID
         * @param {Array<WorkflowInstancesUpdatePayload>} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesPatch(body: Array<WorkflowInstancesUpdatePayload>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesPatch(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Starts a new workflow instance of the provided workflow definition. Specify the ID of the workflow definition in the body. The workflow instance automatically starts based on the latest deployed version of the definition.  Roles permitted to execute this operation:  - Global roles: WorkflowInitiator  - Scope: WORKFLOW_INSTANCE_START 
         * @summary Start a new instance
         * @param {WorkflowInstanceStartPayload} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesPost(body: WorkflowInstanceStartPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowInstance>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the attachments information for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ATTACHMENTS
         * @summary Retrieve instance attachments
         * @param {string} workflowInstanceId The workflow instance ID for which the attachments should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentsContext>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Overrides the attachments information for a workflow instance independent of its status.  Take special care when using this API, because it will override the workflow attachments, that is, it might change the workflow   in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ATTACHMENTS
         * @summary Overwrite instance attachments
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the attachments should be overridden. The workflow instance ID is 36 characters long.
         * @param {AttachmentsContext} body Specify the new information according to the given schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut(workflowInstanceId: string, body: AttachmentsContext, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut(workflowInstanceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves custom workflow attributes for a workflow instance. Labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: WORKFLOW_INSTANCE_GET_ATTRIBUTES 
         * @summary Retrieve custom workflow attributes by workflow instance ID
         * @param {string} workflowInstanceId The ID of the workflow instance for which the custom workflow attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdAttributesGet(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomAttribute>>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdAttributesGet(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the workflow context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_CONTEXT
         * @summary Retrieve instance context
         * @param {string} workflowInstanceId The workflow instance ID for which the context should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdContextGet(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdContextGet(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies parts of the context for a workflow instance independent of its status.  Take special care when using this API, because it might change the workflow context in ways that are incompatible with the expectations  of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and make sure that  the execution has come to a halt, that is, that no further steps are being added to the execution log. Refer to PATCH on the parent resource  and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Update instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be modified. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the modified parts of the context. Note that the modification is limited by the allowed content length of the request body. The length is restricted to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdContextPatch(workflowInstanceId: string, body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdContextPatch(workflowInstanceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Overrides the context for a workflow instance independent of its status.   Take special care when using this API, because it will override the workflow context, that is, it might change the workflow context  in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.  Refer to PATCH on the parent resource and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Overwrite instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be overridden. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the new context according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdContextPut(workflowInstanceId: string, body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdContextPut(workflowInstanceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves current error messages for a workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowDeveloper, WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ERROR_MESSAGES 
         * @summary Retrieve error messages
         * @param {string} workflowInstanceId The workflow instance ID for which the error messages should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowInstanceErrorMessage>>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves execution logs for a given workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_EXECUTION_LOGS 
         * @summary Retrieve execution logs
         * @param {string} workflowInstanceId The workflow instance ID for which the execution logs should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowInstanceExecutionLog>>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the workflow instance with the specified workflow instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET
         * @summary Retrieve workflow instance by ID
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be retrieved. The workflow instance ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdGet(workflowInstanceId: string, $expand?: 'attributes', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowInstance>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdGet(workflowInstanceId, $expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies the properties of a given workflow instance, for example, sets its status to CANCELED or RUNNING.  Status change effects may not take effect immediately, due to asynchronous processing of the request. When you change the status to CANCELED, note the following:  * Workflow instances in CANCELED status are considered final, that is, no further changes are allowed. This is valid as well for other APIs and the processing according to the workflow definition.  * Workflow instances in CANCELED status stop processing as soon as the system allows.  When you are changing the status to SUSPENDED, note the following:  * Status SUSPENDED manually and temporarily suspends processing.  * Workflow instances in SUSPENDED status stop processing as soon as the system allows.  * Workflow instances remain in SUSPENDED status until a status change to RUNNING or CANCELED is requested.  * While the workflow instance status reported by the respective API might change with immediate effect, follow-up actions might only be successful, after asynchronous processing within the workflow instance actually has stopped. To check whether asynchronous processing is ongoing, analyze the execution logs or check the workflow definition structure.  When you are changing the status to RUNNING, note the following:  * For workflow instances in ERRONEOUS status, this retries the failed activities. If these activities continue failing, the workflow instance automatically moves again into ERRONEOUS status.  * If the workflow instance had previously been suspended while in ERRONEOUS status, failed activities, such as service tasks, are retried.   Roles permitted to execute this operation:  - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: WORKFLOW_INSTANCE_CANCEL, WORKFLOW_INSTANCE_RETRY_RESUME, WORKFLOW_INSTANCE_SUSPEND
         * @summary Update instance
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be modified. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceUpdatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdPatch(workflowInstanceId: string, body: WorkflowInstanceUpdatePayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdPatch(workflowInstanceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the instance-specific role assignments of the given workflow instance.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ROLES 
         * @summary Retrieve instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the roles should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdRolesGet(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowInstanceRoles>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdRolesGet(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the instance-specific role assignments of the given workflow instance.  Any of the role assignment properties that is present in the request body will overwrite the existing assignments with the new assignments. Any properties that are either null or not present at all in the request body will leave the corresponding role assignments unchanged.  The maximum number of users and groups that can be assigned to each role is limited to 100.  The use of expressions as part of the role assignments (e.g. ${context.variable}) is only allowed for workflow instances that are not yet COMPLETED or CANCELED.  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ROLES  Examples: - Setting **viewerUsers: \"UserId1, UserId8\"** will remove all existing user assignments of the viewer role and then assign   only the two specified users to the role. - Setting **viewerUsers: \"\"** will remove all existing user assignments of the viewer role. - Specifying any non-null **viewerUsers** in the request body and leaving out **viewerGroups** will update the user   assignments and leave the group assignments unchanged.
         * @summary Update instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the role assignments should be updated. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceRolesUpdatePayload} body Specify new role assignments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdRolesPatch(workflowInstanceId: string, body: WorkflowInstanceRolesUpdatePayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await WorkflowInstancesApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdRolesPatch(workflowInstanceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WorkflowInstancesApi - factory interface
 * @export
 */
export const WorkflowInstancesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Retrieves workflow instances by parameters. If no parameters are specified, all RUNNING, or ERRONEOUS instances are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If multiple parameters are specified for the same attribute or a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not given.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET 
         * @summary Retrieve all instances by query parameters
         * @param {'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc'} [$orderby] The attribute and direction by which workflow instances are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. If sort by definitionVersion is enabled, then definitionId is also added to the sorting query. If not specified, the results are sorted by the \&#39;startedAt\&#39; attribute, in descending order.   * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * definitionId asc - Ascending, from A to Z case-sensitive.  * definitionId desc - Descending, from Z to A case-sensitive.  * definitionVersion asc - Ascending, from A to Z case-sensitive.  * definitionVersion desc - Descending, from Z to A case-sensitive.  * startedAt asc - Ascending, from A to Z case-sensitive.  * startedAt desc - Descending, from Z to A case-sensitive.  * completedAt asc - Ascending, workflow instance completion or cancelation time from the oldest to the most recent, not yet COMPLETED workflow instances first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED workflow instance to the oldest ones, not yet COMPLETED workflow instances last.  * startedBy asc - Ascending, from A to Z case-sensitive.  * startedBy desc - Descending, from Z to A case-sensitive.  * subject asc - Ascending, from A to Z case-sensitive, workflow instances without subject first.  * subject desc - Descending, from Z to A case-sensitive, workflow instances without subject last.  * businessKey asc - Ascending, from A to Z case-sensitive, workflow instances without business key first.  * businessKey desc - Descending, from Z to A case-sensitive, workflow instances without business key last.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow instances, which match the search criteria, should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. 
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {string} [id] Specify the workflow instance ID. The workflow instance ID is 36 characters long.
         * @param {string} [definitionId] Specify the ID of the workflow definition. The ID is at most 64 characters long.
         * @param {string} [definitionVersion] Specify the version of the workflow definition.
         * @param {'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED'} [status] Specify the status of the workflow instance. The values are not case-sensitive.
         * @param {string} [startedAt] Specify at what time the workflow instance was started. Supports two date formats 1) yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2) yyyyMMddHHmmss.SSS.
         * @param {string} [startedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedAt] Specify at what time the workflow instance was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS 
         * @param {string} [completedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedBy] Specify the user who started the workflow instance, in UTF-8 encoding. The user ID is at most 255 characters long.
         * @param {string} [subject] Specify the subject of the workflow instance, in UTF-8 encoding. The subject of a workflow instance is limited to 255 characters.
         * @param {string} [containsText] Specify the text to search for, in UTF-8 encoding. Searches the id, definitionId, subject, startedBy, and businessKey attributes of the workflow instances. The maximum length of these attributes is 255 characters. 
         * @param {string} [businessKey] Specify the business key of the workflow instance, in UTF-8 encoding. The business key of a workflow instance is limited to 255 characters.
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters workflow instances by the value of the custom workflow attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom workflow attributes with different IDs are present in the URL, only workflow instances which contain all of them with the values specified will be returned as a response to the request. If a query by custom workflow attributes matches too many workflow definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesGet($orderby?: 'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', id?: string, definitionId?: string, definitionVersion?: string, status?: 'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED', startedAt?: string, startedFrom?: string, startedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, startedBy?: string, subject?: string, containsText?: string, businessKey?: string, attributesExampleCustomAttribute?: string, options?: any): AxiosPromise<Array<WorkflowInstance>> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesGet($orderby, $skip, $top, $inlinecount, $expand, id, definitionId, definitionVersion, status, startedAt, startedFrom, startedUpTo, completedAt, completedFrom, completedUpTo, startedBy, subject, containsText, businessKey, attributesExampleCustomAttribute, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the given workflow instances according to the specified operations. Currently, the only operation supported is the deletion of workflow instances. You can at most specify 10000 instances to delete in one API call.  Roles permitted to execute this operation: - Global roles: WorkflowTenantOperator - Scope: WORKFLOW_INSTANCES_UPDATE
         * @summary Delete instance by ID
         * @param {Array<WorkflowInstancesUpdatePayload>} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesPatch(body: Array<WorkflowInstancesUpdatePayload>, options?: any): AxiosPromise<void> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesPatch(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts a new workflow instance of the provided workflow definition. Specify the ID of the workflow definition in the body. The workflow instance automatically starts based on the latest deployed version of the definition.  Roles permitted to execute this operation:  - Global roles: WorkflowInitiator  - Scope: WORKFLOW_INSTANCE_START 
         * @summary Start a new instance
         * @param {WorkflowInstanceStartPayload} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesPost(body: WorkflowInstanceStartPayload, options?: any): AxiosPromise<WorkflowInstance> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the attachments information for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ATTACHMENTS
         * @summary Retrieve instance attachments
         * @param {string} workflowInstanceId The workflow instance ID for which the attachments should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet(workflowInstanceId: string, options?: any): AxiosPromise<AttachmentsContext> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Overrides the attachments information for a workflow instance independent of its status.  Take special care when using this API, because it will override the workflow attachments, that is, it might change the workflow   in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ATTACHMENTS
         * @summary Overwrite instance attachments
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the attachments should be overridden. The workflow instance ID is 36 characters long.
         * @param {AttachmentsContext} body Specify the new information according to the given schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut(workflowInstanceId: string, body: AttachmentsContext, options?: any): AxiosPromise<void> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut(workflowInstanceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves custom workflow attributes for a workflow instance. Labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: WORKFLOW_INSTANCE_GET_ATTRIBUTES 
         * @summary Retrieve custom workflow attributes by workflow instance ID
         * @param {string} workflowInstanceId The ID of the workflow instance for which the custom workflow attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdAttributesGet(workflowInstanceId: string, options?: any): AxiosPromise<Array<CustomAttribute>> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdAttributesGet(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the workflow context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_CONTEXT
         * @summary Retrieve instance context
         * @param {string} workflowInstanceId The workflow instance ID for which the context should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdContextGet(workflowInstanceId: string, options?: any): AxiosPromise<object> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdContextGet(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies parts of the context for a workflow instance independent of its status.  Take special care when using this API, because it might change the workflow context in ways that are incompatible with the expectations  of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and make sure that  the execution has come to a halt, that is, that no further steps are being added to the execution log. Refer to PATCH on the parent resource  and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Update instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be modified. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the modified parts of the context. Note that the modification is limited by the allowed content length of the request body. The length is restricted to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdContextPatch(workflowInstanceId: string, body: object, options?: any): AxiosPromise<void> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdContextPatch(workflowInstanceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Overrides the context for a workflow instance independent of its status.   Take special care when using this API, because it will override the workflow context, that is, it might change the workflow context  in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.  Refer to PATCH on the parent resource and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Overwrite instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be overridden. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the new context according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdContextPut(workflowInstanceId: string, body: object, options?: any): AxiosPromise<void> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdContextPut(workflowInstanceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves current error messages for a workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowDeveloper, WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ERROR_MESSAGES 
         * @summary Retrieve error messages
         * @param {string} workflowInstanceId The workflow instance ID for which the error messages should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet(workflowInstanceId: string, options?: any): AxiosPromise<Array<WorkflowInstanceErrorMessage>> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves execution logs for a given workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_EXECUTION_LOGS 
         * @summary Retrieve execution logs
         * @param {string} workflowInstanceId The workflow instance ID for which the execution logs should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet(workflowInstanceId: string, options?: any): AxiosPromise<Array<WorkflowInstanceExecutionLog>> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the workflow instance with the specified workflow instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET
         * @summary Retrieve workflow instance by ID
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be retrieved. The workflow instance ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdGet(workflowInstanceId: string, $expand?: 'attributes', options?: any): AxiosPromise<WorkflowInstance> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdGet(workflowInstanceId, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the properties of a given workflow instance, for example, sets its status to CANCELED or RUNNING.  Status change effects may not take effect immediately, due to asynchronous processing of the request. When you change the status to CANCELED, note the following:  * Workflow instances in CANCELED status are considered final, that is, no further changes are allowed. This is valid as well for other APIs and the processing according to the workflow definition.  * Workflow instances in CANCELED status stop processing as soon as the system allows.  When you are changing the status to SUSPENDED, note the following:  * Status SUSPENDED manually and temporarily suspends processing.  * Workflow instances in SUSPENDED status stop processing as soon as the system allows.  * Workflow instances remain in SUSPENDED status until a status change to RUNNING or CANCELED is requested.  * While the workflow instance status reported by the respective API might change with immediate effect, follow-up actions might only be successful, after asynchronous processing within the workflow instance actually has stopped. To check whether asynchronous processing is ongoing, analyze the execution logs or check the workflow definition structure.  When you are changing the status to RUNNING, note the following:  * For workflow instances in ERRONEOUS status, this retries the failed activities. If these activities continue failing, the workflow instance automatically moves again into ERRONEOUS status.  * If the workflow instance had previously been suspended while in ERRONEOUS status, failed activities, such as service tasks, are retried.   Roles permitted to execute this operation:  - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: WORKFLOW_INSTANCE_CANCEL, WORKFLOW_INSTANCE_RETRY_RESUME, WORKFLOW_INSTANCE_SUSPEND
         * @summary Update instance
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be modified. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceUpdatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdPatch(workflowInstanceId: string, body: WorkflowInstanceUpdatePayload, options?: any): AxiosPromise<void> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdPatch(workflowInstanceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the instance-specific role assignments of the given workflow instance.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ROLES 
         * @summary Retrieve instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the roles should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdRolesGet(workflowInstanceId: string, options?: any): AxiosPromise<WorkflowInstanceRoles> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdRolesGet(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the instance-specific role assignments of the given workflow instance.  Any of the role assignment properties that is present in the request body will overwrite the existing assignments with the new assignments. Any properties that are either null or not present at all in the request body will leave the corresponding role assignments unchanged.  The maximum number of users and groups that can be assigned to each role is limited to 100.  The use of expressions as part of the role assignments (e.g. ${context.variable}) is only allowed for workflow instances that are not yet COMPLETED or CANCELED.  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ROLES  Examples: - Setting **viewerUsers: \"UserId1, UserId8\"** will remove all existing user assignments of the viewer role and then assign   only the two specified users to the role. - Setting **viewerUsers: \"\"** will remove all existing user assignments of the viewer role. - Specifying any non-null **viewerUsers** in the request body and leaving out **viewerGroups** will update the user   assignments and leave the group assignments unchanged.
         * @summary Update instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the role assignments should be updated. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceRolesUpdatePayload} body Specify new role assignments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdRolesPatch(workflowInstanceId: string, body: WorkflowInstanceRolesUpdatePayload, options?: any): AxiosPromise<void> {
            return WorkflowInstancesApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdRolesPatch(workflowInstanceId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WorkflowInstancesApi - object-oriented interface
 * @export
 * @class WorkflowInstancesApi
 * @extends {BaseAPI}
 */
export class WorkflowInstancesApi extends BaseAPI {
    /**
     * Retrieves workflow instances by parameters. If no parameters are specified, all RUNNING, or ERRONEOUS instances are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If multiple parameters are specified for the same attribute or a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not given.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET 
     * @summary Retrieve all instances by query parameters
     * @param {'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc'} [$orderby] The attribute and direction by which workflow instances are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. If sort by definitionVersion is enabled, then definitionId is also added to the sorting query. If not specified, the results are sorted by the \&#39;startedAt\&#39; attribute, in descending order.   * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * definitionId asc - Ascending, from A to Z case-sensitive.  * definitionId desc - Descending, from Z to A case-sensitive.  * definitionVersion asc - Ascending, from A to Z case-sensitive.  * definitionVersion desc - Descending, from Z to A case-sensitive.  * startedAt asc - Ascending, from A to Z case-sensitive.  * startedAt desc - Descending, from Z to A case-sensitive.  * completedAt asc - Ascending, workflow instance completion or cancelation time from the oldest to the most recent, not yet COMPLETED workflow instances first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED workflow instance to the oldest ones, not yet COMPLETED workflow instances last.  * startedBy asc - Ascending, from A to Z case-sensitive.  * startedBy desc - Descending, from Z to A case-sensitive.  * subject asc - Ascending, from A to Z case-sensitive, workflow instances without subject first.  * subject desc - Descending, from Z to A case-sensitive, workflow instances without subject last.  * businessKey asc - Ascending, from A to Z case-sensitive, workflow instances without business key first.  * businessKey desc - Descending, from Z to A case-sensitive, workflow instances without business key last.
     * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
     * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
     * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow instances, which match the search criteria, should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. 
     * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
     * @param {string} [id] Specify the workflow instance ID. The workflow instance ID is 36 characters long.
     * @param {string} [definitionId] Specify the ID of the workflow definition. The ID is at most 64 characters long.
     * @param {string} [definitionVersion] Specify the version of the workflow definition.
     * @param {'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED'} [status] Specify the status of the workflow instance. The values are not case-sensitive.
     * @param {string} [startedAt] Specify at what time the workflow instance was started. Supports two date formats 1) yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2) yyyyMMddHHmmss.SSS.
     * @param {string} [startedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
     * @param {string} [startedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
     * @param {string} [completedAt] Specify at what time the workflow instance was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS 
     * @param {string} [completedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
     * @param {string} [completedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
     * @param {string} [startedBy] Specify the user who started the workflow instance, in UTF-8 encoding. The user ID is at most 255 characters long.
     * @param {string} [subject] Specify the subject of the workflow instance, in UTF-8 encoding. The subject of a workflow instance is limited to 255 characters.
     * @param {string} [containsText] Specify the text to search for, in UTF-8 encoding. Searches the id, definitionId, subject, startedBy, and businessKey attributes of the workflow instances. The maximum length of these attributes is 255 characters. 
     * @param {string} [businessKey] Specify the business key of the workflow instance, in UTF-8 encoding. The business key of a workflow instance is limited to 255 characters.
     * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters workflow instances by the value of the custom workflow attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom workflow attributes with different IDs are present in the URL, only workflow instances which contain all of them with the values specified will be returned as a response to the request. If a query by custom workflow attributes matches too many workflow definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesGet($orderby?: 'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', id?: string, definitionId?: string, definitionVersion?: string, status?: 'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED', startedAt?: string, startedFrom?: string, startedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, startedBy?: string, subject?: string, containsText?: string, businessKey?: string, attributesExampleCustomAttribute?: string, options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesGet($orderby, $skip, $top, $inlinecount, $expand, id, definitionId, definitionVersion, status, startedAt, startedFrom, startedUpTo, completedAt, completedFrom, completedUpTo, startedBy, subject, containsText, businessKey, attributesExampleCustomAttribute, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the given workflow instances according to the specified operations. Currently, the only operation supported is the deletion of workflow instances. You can at most specify 10000 instances to delete in one API call.  Roles permitted to execute this operation: - Global roles: WorkflowTenantOperator - Scope: WORKFLOW_INSTANCES_UPDATE
     * @summary Delete instance by ID
     * @param {Array<WorkflowInstancesUpdatePayload>} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesPatch(body: Array<WorkflowInstancesUpdatePayload>, options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesPatch(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts a new workflow instance of the provided workflow definition. Specify the ID of the workflow definition in the body. The workflow instance automatically starts based on the latest deployed version of the definition.  Roles permitted to execute this operation:  - Global roles: WorkflowInitiator  - Scope: WORKFLOW_INSTANCE_START 
     * @summary Start a new instance
     * @param {WorkflowInstanceStartPayload} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesPost(body: WorkflowInstanceStartPayload, options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the attachments information for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ATTACHMENTS
     * @summary Retrieve instance attachments
     * @param {string} workflowInstanceId The workflow instance ID for which the attachments should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet(workflowInstanceId: string, options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Overrides the attachments information for a workflow instance independent of its status.  Take special care when using this API, because it will override the workflow attachments, that is, it might change the workflow   in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ATTACHMENTS
     * @summary Overwrite instance attachments
     * @param {string} workflowInstanceId Specify the workflow instance ID for which the attachments should be overridden. The workflow instance ID is 36 characters long.
     * @param {AttachmentsContext} body Specify the new information according to the given schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut(workflowInstanceId: string, body: AttachmentsContext, options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut(workflowInstanceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves custom workflow attributes for a workflow instance. Labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: WORKFLOW_INSTANCE_GET_ATTRIBUTES 
     * @summary Retrieve custom workflow attributes by workflow instance ID
     * @param {string} workflowInstanceId The ID of the workflow instance for which the custom workflow attributes should be retrieved. The ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdAttributesGet(workflowInstanceId: string, options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdAttributesGet(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the workflow context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_CONTEXT
     * @summary Retrieve instance context
     * @param {string} workflowInstanceId The workflow instance ID for which the context should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdContextGet(workflowInstanceId: string, options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdContextGet(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies parts of the context for a workflow instance independent of its status.  Take special care when using this API, because it might change the workflow context in ways that are incompatible with the expectations  of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and make sure that  the execution has come to a halt, that is, that no further steps are being added to the execution log. Refer to PATCH on the parent resource  and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
     * @summary Update instance context
     * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be modified. The workflow instance ID is 36 characters long.
     * @param {object} body Specify the modified parts of the context. Note that the modification is limited by the allowed content length of the request body. The length is restricted to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdContextPatch(workflowInstanceId: string, body: object, options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdContextPatch(workflowInstanceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Overrides the context for a workflow instance independent of its status.   Take special care when using this API, because it will override the workflow context, that is, it might change the workflow context  in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.  Refer to PATCH on the parent resource and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
     * @summary Overwrite instance context
     * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be overridden. The workflow instance ID is 36 characters long.
     * @param {object} body Specify the new context according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdContextPut(workflowInstanceId: string, body: object, options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdContextPut(workflowInstanceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves current error messages for a workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowDeveloper, WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ERROR_MESSAGES 
     * @summary Retrieve error messages
     * @param {string} workflowInstanceId The workflow instance ID for which the error messages should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet(workflowInstanceId: string, options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves execution logs for a given workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_EXECUTION_LOGS 
     * @summary Retrieve execution logs
     * @param {string} workflowInstanceId The workflow instance ID for which the execution logs should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet(workflowInstanceId: string, options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the workflow instance with the specified workflow instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET
     * @summary Retrieve workflow instance by ID
     * @param {string} workflowInstanceId The ID of the workflow instance, which should be retrieved. The workflow instance ID is 36 characters long.
     * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdGet(workflowInstanceId: string, $expand?: 'attributes', options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdGet(workflowInstanceId, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the properties of a given workflow instance, for example, sets its status to CANCELED or RUNNING.  Status change effects may not take effect immediately, due to asynchronous processing of the request. When you change the status to CANCELED, note the following:  * Workflow instances in CANCELED status are considered final, that is, no further changes are allowed. This is valid as well for other APIs and the processing according to the workflow definition.  * Workflow instances in CANCELED status stop processing as soon as the system allows.  When you are changing the status to SUSPENDED, note the following:  * Status SUSPENDED manually and temporarily suspends processing.  * Workflow instances in SUSPENDED status stop processing as soon as the system allows.  * Workflow instances remain in SUSPENDED status until a status change to RUNNING or CANCELED is requested.  * While the workflow instance status reported by the respective API might change with immediate effect, follow-up actions might only be successful, after asynchronous processing within the workflow instance actually has stopped. To check whether asynchronous processing is ongoing, analyze the execution logs or check the workflow definition structure.  When you are changing the status to RUNNING, note the following:  * For workflow instances in ERRONEOUS status, this retries the failed activities. If these activities continue failing, the workflow instance automatically moves again into ERRONEOUS status.  * If the workflow instance had previously been suspended while in ERRONEOUS status, failed activities, such as service tasks, are retried.   Roles permitted to execute this operation:  - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: WORKFLOW_INSTANCE_CANCEL, WORKFLOW_INSTANCE_RETRY_RESUME, WORKFLOW_INSTANCE_SUSPEND
     * @summary Update instance
     * @param {string} workflowInstanceId The ID of the workflow instance, which should be modified. The workflow instance ID is 36 characters long.
     * @param {WorkflowInstanceUpdatePayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdPatch(workflowInstanceId: string, body: WorkflowInstanceUpdatePayload, options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdPatch(workflowInstanceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the instance-specific role assignments of the given workflow instance.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ROLES 
     * @summary Retrieve instance roles
     * @param {string} workflowInstanceId The workflow instance ID for which the roles should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdRolesGet(workflowInstanceId: string, options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdRolesGet(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the instance-specific role assignments of the given workflow instance.  Any of the role assignment properties that is present in the request body will overwrite the existing assignments with the new assignments. Any properties that are either null or not present at all in the request body will leave the corresponding role assignments unchanged.  The maximum number of users and groups that can be assigned to each role is limited to 100.  The use of expressions as part of the role assignments (e.g. ${context.variable}) is only allowed for workflow instances that are not yet COMPLETED or CANCELED.  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ROLES  Examples: - Setting **viewerUsers: \"UserId1, UserId8\"** will remove all existing user assignments of the viewer role and then assign   only the two specified users to the role. - Setting **viewerUsers: \"\"** will remove all existing user assignments of the viewer role. - Specifying any non-null **viewerUsers** in the request body and leaving out **viewerGroups** will update the user   assignments and leave the group assignments unchanged.
     * @summary Update instance roles
     * @param {string} workflowInstanceId The workflow instance ID for which the role assignments should be updated. The workflow instance ID is 36 characters long.
     * @param {WorkflowInstanceRolesUpdatePayload} body Specify new role assignments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WorkflowInstancesApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdRolesPatch(workflowInstanceId: string, body: WorkflowInstanceRolesUpdatePayload, options?: any) {
        return WorkflowInstancesApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdRolesPatch(workflowInstanceId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
