/* tslint:disable */
/* eslint-disable */
/**
 * Workflow API for Cloud Foundry
 * This API uses the SAP Cloud Platform Workflow service. With the API, you can, for example, start new workflow instances and work with tasks.  Note (relevant only for SAP API Business Hub): For authentication purposes, the API uses OAuth 2.0 security (with JSON Web Token, JWT). Thus, \"Try Out\" only works with an explicitly configured environment. For more information on how to obtain the necessary parameters, please see [Determine Service Configuration Parameters](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/abb1f66b2c3b4983b6b656654cfc3d2b.html) in the documentation. The OAuth client you use must have [extended scopes](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/baf2847f6d1c401a83ca3a1427b8ff84.html).  Note: These APIs are designed for loosely coupled clients. This means:  - If workflow service adds fields to responses, the API version number does not increase. Your client must ignore new fields. - The order of fields in responses and of entries in arrays may change. This applies unless the API provides an explicit means to specify the desired order. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { AttachmentsContext } from '../model';
// @ts-ignore
import { ConflictError } from '../model';
// @ts-ignore
import { ConsumingWorkflowInstance } from '../model';
// @ts-ignore
import { CustomAttribute } from '../model';
// @ts-ignore
import { FormMetadata } from '../model';
// @ts-ignore
import { FormModel } from '../model';
// @ts-ignore
import { Job } from '../model';
// @ts-ignore
import { SampleContext } from '../model';
// @ts-ignore
import { SendMessagePayload } from '../model';
// @ts-ignore
import { TaskInstance } from '../model';
// @ts-ignore
import { TechnicalError } from '../model';
// @ts-ignore
import { UnauthorizedError } from '../model';
// @ts-ignore
import { UpdateTaskInstancePayload } from '../model';
// @ts-ignore
import { WorkflowDefinition } from '../model';
// @ts-ignore
import { WorkflowDefinitionVersion } from '../model';
// @ts-ignore
import { WorkflowInstance } from '../model';
// @ts-ignore
import { WorkflowInstanceErrorMessage } from '../model';
// @ts-ignore
import { WorkflowInstanceExecutionLog } from '../model';
// @ts-ignore
import { WorkflowInstanceRoles } from '../model';
// @ts-ignore
import { WorkflowInstanceRolesUpdatePayload } from '../model';
// @ts-ignore
import { WorkflowInstanceStartPayload } from '../model';
// @ts-ignore
import { WorkflowInstanceUpdatePayload } from '../model';
// @ts-ignore
import { WorkflowInstancesUpdatePayload } from '../model';
// @ts-ignore
import { WorkflowModel } from '../model';
/**
 * SapCpWorkflowCfApi - axios parameter creator
 * @export
 */
export const SapCpWorkflowCfApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Requests the export of workflow definitions metadata, form definitions metadata, workflow instances, and task instances. The file and data structures used are subject to change.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: DATA_EXPORT 
         * @summary Data Export
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExportGet: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/export`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Undeploys all versions of an existing form.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: FORM_DEFINITION_UNDEPLOY 
         * @summary Delete a form.
         * @param {string} formId The ID of the form you want to undeploy. The ID is at most 255 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsFormIdDelete: async (formId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            if (formId === null || formId === undefined) {
                throw new RequiredError('formId','Required parameter formId was null or undefined when calling v1FormsFormIdDelete.');
            }
            const localVarPath = `/v1/forms/{formId}`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the form model with the specified form ID and revision.  Roles permitted to execute this operation:  - Global roles (retrieve start and task forms): WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Global roles (retrieve start forms only): WorkflowInitiator  - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and revision.
         * @param {string} formId The ID of the form for which the model should be retrieved.
         * @param {string} revisionId The revision of the form for which the model should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsFormIdRevisionsRevisionIdModelGet: async (formId: string, revisionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            if (formId === null || formId === undefined) {
                throw new RequiredError('formId','Required parameter formId was null or undefined when calling v1FormsFormIdRevisionsRevisionIdModelGet.');
            }
            // verify required parameter 'revisionId' is not null or undefined
            if (revisionId === null || revisionId === undefined) {
                throw new RequiredError('revisionId','Required parameter revisionId was null or undefined when calling v1FormsFormIdRevisionsRevisionIdModelGet.');
            }
            const localVarPath = `/v1/forms/{formId}/revisions/{revisionId}/model`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)))
                .replace(`{${"revisionId"}}`, encodeURIComponent(String(revisionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the model of the specified version of the specified form definition.    Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin, WorkflowDeveloper   - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and version number.
         * @param {string} formId The form ID for which the model should be retrieved. The form definition ID is at most 255 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsFormIdVersionsVersionNumberModelGet: async (formId: string, versionNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'formId' is not null or undefined
            if (formId === null || formId === undefined) {
                throw new RequiredError('formId','Required parameter formId was null or undefined when calling v1FormsFormIdVersionsVersionNumberModelGet.');
            }
            // verify required parameter 'versionNumber' is not null or undefined
            if (versionNumber === null || versionNumber === undefined) {
                throw new RequiredError('versionNumber','Required parameter versionNumber was null or undefined when calling v1FormsFormIdVersionsVersionNumberModelGet.');
            }
            const localVarPath = `/v1/forms/{formId}/versions/{versionNumber}/model`
                .replace(`{${"formId"}}`, encodeURIComponent(String(formId)))
                .replace(`{${"versionNumber"}}`, encodeURIComponent(String(versionNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of the latest version of each revision of each deployed form definition. The request can be parameterized.  The results are sorted by the \'createdAt\' attribute in descending order.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: FORM_DEFINITION_GET 
         * @summary Retrieve all form definitions
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the form definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {'start' | 'task'} [type] Specify whether the response should be filtered by the form type. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsGet: async ($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', type?: 'start' | 'task', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/forms`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($inlinecount !== undefined) {
                localVarQueryParameter['$inlinecount'] = $inlinecount;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Tracks the status of API requests, which the server executed asynchronously.          Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: JOB_STATUS_GET 
         * @summary Retrieve Job status
         * @param {string} jobId The ID of the job for which you check the status. Typically, the ID has been retrieved from another API request that was processed asynchronously. The ID is at most 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsJobIdGet: async (jobId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'jobId' is not null or undefined
            if (jobId === null || jobId === undefined) {
                throw new RequiredError('jobId','Required parameter jobId was null or undefined when calling v1JobsJobIdGet.');
            }
            const localVarPath = `/v1/jobs/{jobId}`
                .replace(`{${"jobId"}}`, encodeURIComponent(String(jobId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Sends a message to a set of workflow instances for consumption in intermediate message events. The message is identified by the name specified in the workflow model (request body parameter \'definitionId\')  and parameters identifying the workflow instances that should consume the message.   The message is consumed by the workflow instances that match the following criteria:  * The instance can be a specific match when using its workflow instance ID (request body parameter \'workflowInstanceId\').  Or the instance is a generic match when using the ID of the workflow model together with the business key (request body parameters \'workflowDefinitionId\' respectively \'businessKey\'). You can either use the specific or generic match but not both in the same call.  * The workflow instance is not in the SUSPENDED state.  * The workflow instance currently waits at the intermediate message event referring to the specified message.  The business key of a workflow instance matches if the business key specified in the request body is the same.    Roles permitted to execute this operation:  - Global roles:  WorkflowMessageSender  - Scope: MESSAGE_SEND
         * @summary Send message
         * @param {SendMessagePayload} body Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MessagesPost: async (body: SendMessagePayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1MessagesPost.');
            }
            const localVarPath = `/v1/messages/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Completely erases all workflow definitions, all workflow instances, and all form definitions.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: DATA_PURGE 
         * @summary Purge instances and definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PurgePost: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/purge`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves task definitions by query parameters.   A task definition is identified by the ID of the respective activity within a workflow definition (for example, usertask1) and the workflow definition ID.  The workflow definition ID is version independent. That means, this API assumes that task definitions are semantically the same if they span several  workflow versions and therefore have the same identifier. The latest workflow definition version is expected to contain the leading property values of the task definition.  At the moment, filtering is limited to the $skip and $top parameters for paging through the available task definitions.  The returned task definitions are sorted in descending order of their creation time.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin
         * @summary Retrieve definitions by query parameters
         * @param {number} [$skip] The number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. You can use this parameter only once. Refer also to the $top parameter.
         * @param {number} [$top] The number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. You can use this parameter only once. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the task definitions should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. You can use this parameter only once.
         * @param {'attributeDefinitions'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributeDefinitions\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributeDefinitions\&#39; field is not included into the output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where the corresponding task definition exists.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskDefinitionsGet: async ($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributeDefinitions', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/task-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($inlinecount !== undefined) {
                localVarQueryParameter['$inlinecount'] = $inlinecount;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves user task instances by parameters. If no parameters are specified, all instances with status READY, RESERVED, CANCELED, or COMPLETED are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not specified. By default, returned tasks are sorted by creation time in ascending order.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET
         * @summary Retrieve instances by query parameters
         * @param {number} [$skip] The number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. You can use this parameter only once. Refer also to the $top parameter.
         * @param {number} [$top] The number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. You can use this parameter only once. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the task instances, which match the search criteria, should be returned as a value  of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. You can use this parameter only once.
         * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {'claimedAt asc' | 'claimedAt desc' | 'completedAt asc' | 'completedAt desc' | 'createdAt asc' | 'createdAt desc' | 'lastChangedAt asc' | 'lastChangedAt desc' | 'dueDate asc' | 'dueDate desc' | 'subject asc' | 'subject desc' | 'description asc' | 'description desc' | 'activityId asc' | 'activityId desc' | 'id asc' | 'id desc' | 'processor asc' | 'processor desc' | 'workflowDefinitionId asc' | 'workflowDefinitionId desc' | 'workflowInstanceId asc' | 'workflowInstanceId desc' | 'priority asc' | 'priority desc'} [$orderby] The attribute and direction by which tasks are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. To stabilize the order of tasks the implicit second ordering parameter \&#39;createdAt asc\&#39; is applied.   * claimedAt asc - Ascending, task claim time from the oldest to the most recent, tasks with status READY (not yet claimed) first.  * claimedAt desc - Descending, from the most recently claimed tasks to the oldest ones, tasks with status READY (not yet claimed) last.  * completedAt asc - Ascending, task completion or cancelation time from the oldest to the most recent, not yet COMPLETED tasks first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED tasks to the oldest ones, not yet COMPLETED tasks last.  * createdAt asc - Ascending, task creation time from the oldest to the most recent.  * createdAt desc - Descending, from the most recently created tasks to the oldest ones.  * lastChangedAt asc - Ascending, task last change time from the oldest to the most recent.  * lastChangedAt desc - Descending, from the most recently changed tasks to the oldest ones.               * dueDate asc - Ascending, tasks due date from the oldest to the most distant in future ones, tasks without due date first.  * dueDate desc - Descending, tasks due date from the most distant in future to the oldest ones, tasks without due date last.  * subject asc - Ascending, from A to Z case-sensitive.  * subject desc - Descending, from Z to A case-sensitive.  * description asc - Ascending, from A to Z case-sensitive, tasks without description first.  * description desc - Descending, from Z to A case-sensitive, tasks without description last.  * activityId asc - Ascending, from A to Z case-sensitive.  * activityId desc - Descending, from Z to A case-sensitive.  * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * processor asc - Ascending, from A to Z case-sensitive, tasks without processor first.  * processor desc - Descending, from Z to A case-sensitive, tasks without processor last.  * workflowDefinitionId asc - Ascending, from A to Z case-sensitive.  * workflowDefinitionId desc - Descending, from Z to A case-sensitive.  * workflowInstanceId asc - Ascending, from A to Z case-sensitive.  * workflowInstanceId desc - Descending, from Z to A case-sensitive.  * priority asc - Ascending, tasks priority from lowest to highest.  * priority desc - Descending, tasks priority from highest to lowest.
         * @param {string} [workflowInstanceId] The workflow instance ID for which the user task instances are returned. The workflow instance ID is 36 characters long.
         * @param {string} [workflowDefinitionId] The workflow definition ID for which the user task instances are returned.
         * @param {string} [processor] The processor of the user task instance.
         * @param {string} [id] The unique ID of the user task instance. The user task instance ID is 36 characters long.
         * @param {string} [activityId] The activityId of the user task instance. This field represents the ID of the user task definition.
         * @param {string} [description] The description of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
         * @param {string} [subject] The subject of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
         * @param {string} [createdAt] Time when the user task instance has been created. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;createdFrom\&#39; and \&#39;createdUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [createdFrom] The start time (inclusive) of the time range when the user task instance was created. Must be less or equal to the value of the \&#39;createdUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [createdUpTo] The end time (inclusive) of the time range when the user task instance was created. Must be greater or equal to the value of the \&#39;createdFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [claimedAt] Time when the user task instance was claimed. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;claimedFrom\&#39; and \&#39;claimedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [claimedFrom] The start time (inclusive) of the time range when the user task instance was claimed. Must be less or equal to the value of the \&#39;claimedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [claimedUpTo] The end time (inclusive) of the time range when the user task instance was claimed. Must be greater or equal to the value of the \&#39;claimedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [completedAt] Time when the user task instance was COMPLETED or CANCELED. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;completedFrom\&#39; and \&#39;completedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [completedFrom] The start time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be less or equal to the value of the \&#39;completedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [completedUpTo] The end time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be greater or equal to the value of the \&#39;completedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [lastChangedAt] Time when the user task instance has been changed for the last time. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;lastChangedFrom\&#39; and \&#39;lastChangedTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [lastChangedFrom] The start time (inclusive) of the time range when the user task instance was changed for the last time. Must be less or equal to the value of the \&#39;lastChangedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [lastChangedUpTo] The end time (inclusive) of the time range when the user task instance was changed for the last time. Must be greater or equal to the value of the \&#39;lastChangedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [dueDate] The due date of the user task instance. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;dueDateFrom\&#39; and \&#39;dueDateUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [dueDateFrom] The start time (inclusive) of the due date time range for the user task instance. Must be less or equal to the value of the \&#39;dueDateUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [dueDateUpTo] The end time (inclusive) of the due date time range for the user task instance. Must be greater or equal to the \&#39;dueDateFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {'LOW' | 'MEDIUM' | 'HIGH' | 'VERY_HIGH'} [priority] The priority of the user task instance. The values are case-insensitive. 
         * @param {'READY' | 'RESERVED' | 'COMPLETED' | 'CANCELED'} [status] The status of the user task instance. The values are case-insensitive. 
         * @param {string} [recipientUsers] The users who must be among the recipient users of the user task instance. A user task instance has to match at least one of the recipient users specified. Specify the users by repeating this parameter multiple times, with one user each.  
         * @param {string} [recipientGroups] The groups which must be among the recipient groups of the user task instance. A user task instance has to match at least one of the recipient groups specified. Specify the groups by repeating this parameter multiple times, with one user each.  
         * @param {string} [containsText] Text, which should be contained in at least one of the following fields of the user task instance:   * subject  * description  * activityId  * id  * processor  * workflowDefinitionId  * workflowInstanceId  Performed filtering is case-insensitive. You must not use this parameter more than once. 
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters task instances by the value of the custom task attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom task attributes with different IDs are present in the URL, only tasks which contain all of them with the values specified will be returned as a response to the request. If a query by custom task attributes matches too many task definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
         * @param {string} [definitionId] The definition ID of the user task. It consists of the ID of the task defined in the workflow definition (task definition ID) as well as the workflow definition ID delimited by an \&#39;@\&#39; sign. For optimal performance, specify this parameter when searching for tasks by custom task attributes. If the custom task attribute IDs from the query match more than 50 task definitions, you have to specify one or more task definition IDs when searching for tasks by custom task attributes. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesGet: async ($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', $orderby?: 'claimedAt asc' | 'claimedAt desc' | 'completedAt asc' | 'completedAt desc' | 'createdAt asc' | 'createdAt desc' | 'lastChangedAt asc' | 'lastChangedAt desc' | 'dueDate asc' | 'dueDate desc' | 'subject asc' | 'subject desc' | 'description asc' | 'description desc' | 'activityId asc' | 'activityId desc' | 'id asc' | 'id desc' | 'processor asc' | 'processor desc' | 'workflowDefinitionId asc' | 'workflowDefinitionId desc' | 'workflowInstanceId asc' | 'workflowInstanceId desc' | 'priority asc' | 'priority desc', workflowInstanceId?: string, workflowDefinitionId?: string, processor?: string, id?: string, activityId?: string, description?: string, subject?: string, createdAt?: string, createdFrom?: string, createdUpTo?: string, claimedAt?: string, claimedFrom?: string, claimedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, lastChangedAt?: string, lastChangedFrom?: string, lastChangedUpTo?: string, dueDate?: string, dueDateFrom?: string, dueDateUpTo?: string, priority?: 'LOW' | 'MEDIUM' | 'HIGH' | 'VERY_HIGH', status?: 'READY' | 'RESERVED' | 'COMPLETED' | 'CANCELED', recipientUsers?: string, recipientGroups?: string, containsText?: string, attributesExampleCustomAttribute?: string, definitionId?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/task-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($inlinecount !== undefined) {
                localVarQueryParameter['$inlinecount'] = $inlinecount;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if (workflowInstanceId !== undefined) {
                localVarQueryParameter['workflowInstanceId'] = workflowInstanceId;
            }

            if (workflowDefinitionId !== undefined) {
                localVarQueryParameter['workflowDefinitionId'] = workflowDefinitionId;
            }

            if (processor !== undefined) {
                localVarQueryParameter['processor'] = processor;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (activityId !== undefined) {
                localVarQueryParameter['activityId'] = activityId;
            }

            if (description !== undefined) {
                localVarQueryParameter['description'] = description;
            }

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (createdAt !== undefined) {
                localVarQueryParameter['createdAt'] = createdAt;
            }

            if (createdFrom !== undefined) {
                localVarQueryParameter['createdFrom'] = createdFrom;
            }

            if (createdUpTo !== undefined) {
                localVarQueryParameter['createdUpTo'] = createdUpTo;
            }

            if (claimedAt !== undefined) {
                localVarQueryParameter['claimedAt'] = claimedAt;
            }

            if (claimedFrom !== undefined) {
                localVarQueryParameter['claimedFrom'] = claimedFrom;
            }

            if (claimedUpTo !== undefined) {
                localVarQueryParameter['claimedUpTo'] = claimedUpTo;
            }

            if (completedAt !== undefined) {
                localVarQueryParameter['completedAt'] = completedAt;
            }

            if (completedFrom !== undefined) {
                localVarQueryParameter['completedFrom'] = completedFrom;
            }

            if (completedUpTo !== undefined) {
                localVarQueryParameter['completedUpTo'] = completedUpTo;
            }

            if (lastChangedAt !== undefined) {
                localVarQueryParameter['lastChangedAt'] = lastChangedAt;
            }

            if (lastChangedFrom !== undefined) {
                localVarQueryParameter['lastChangedFrom'] = lastChangedFrom;
            }

            if (lastChangedUpTo !== undefined) {
                localVarQueryParameter['lastChangedUpTo'] = lastChangedUpTo;
            }

            if (dueDate !== undefined) {
                localVarQueryParameter['dueDate'] = dueDate;
            }

            if (dueDateFrom !== undefined) {
                localVarQueryParameter['dueDateFrom'] = dueDateFrom;
            }

            if (dueDateUpTo !== undefined) {
                localVarQueryParameter['dueDateUpTo'] = dueDateUpTo;
            }

            if (priority !== undefined) {
                localVarQueryParameter['priority'] = priority;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (recipientUsers !== undefined) {
                localVarQueryParameter['recipientUsers'] = recipientUsers;
            }

            if (recipientGroups !== undefined) {
                localVarQueryParameter['recipientGroups'] = recipientGroups;
            }

            if (containsText !== undefined) {
                localVarQueryParameter['containsText'] = containsText;
            }

            if (attributesExampleCustomAttribute !== undefined) {
                localVarQueryParameter['attributes.ExampleCustomAttribute'] = attributesExampleCustomAttribute;
            }

            if (definitionId !== undefined) {
                localVarQueryParameter['definitionId'] = definitionId;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the attachments information of a workflow instance via the given user task.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_ATTACHMENTS
         * @summary Retrieve task instance attachments
         * @param {string} taskInstanceId The ID of the user task via which the attachments information of the corresponding workflow instance should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesTaskInstanceIdAttachmentsGet: async (taskInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskInstanceId' is not null or undefined
            if (taskInstanceId === null || taskInstanceId === undefined) {
                throw new RequiredError('taskInstanceId','Required parameter taskInstanceId was null or undefined when calling v1TaskInstancesTaskInstanceIdAttachmentsGet.');
            }
            const localVarPath = `/v1/task-instances/{taskInstanceId}/attachments`
                .replace(`{${"taskInstanceId"}}`, encodeURIComponent(String(taskInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves custom task attributes of a user task. Labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET_ATTRIBUTES 
         * @summary Retrieve custom task attributes by task instance ID
         * @param {string} taskInstanceId The ID of the user task instance for which the custom task attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesTaskInstanceIdAttributesGet: async (taskInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskInstanceId' is not null or undefined
            if (taskInstanceId === null || taskInstanceId === undefined) {
                throw new RequiredError('taskInstanceId','Required parameter taskInstanceId was null or undefined when calling v1TaskInstancesTaskInstanceIdAttributesGet.');
            }
            const localVarPath = `/v1/task-instances/{taskInstanceId}/attributes`
                .replace(`{${"taskInstanceId"}}`, encodeURIComponent(String(taskInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the task context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context of a user task.  Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_CONTEXT
         * @summary Retrieve task context by ID
         * @param {string} taskInstanceId The ID of the user task for which the context should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesTaskInstanceIdContextGet: async (taskInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskInstanceId' is not null or undefined
            if (taskInstanceId === null || taskInstanceId === undefined) {
                throw new RequiredError('taskInstanceId','Required parameter taskInstanceId was null or undefined when calling v1TaskInstancesTaskInstanceIdContextGet.');
            }
            const localVarPath = `/v1/task-instances/{taskInstanceId}/context`
                .replace(`{${"taskInstanceId"}}`, encodeURIComponent(String(taskInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the form metadata of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM 
         * @summary Retrieve form metadata of the given task instance.
         * @param {string} taskInstanceId The ID of the user task instance for which the form metadata should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesTaskInstanceIdFormGet: async (taskInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskInstanceId' is not null or undefined
            if (taskInstanceId === null || taskInstanceId === undefined) {
                throw new RequiredError('taskInstanceId','Required parameter taskInstanceId was null or undefined when calling v1TaskInstancesTaskInstanceIdFormGet.');
            }
            const localVarPath = `/v1/task-instances/{taskInstanceId}/form`
                .replace(`{${"taskInstanceId"}}`, encodeURIComponent(String(taskInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the form model of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM_MODEL 
         * @summary Retrieve form model of the given task instance.
         * @param {string} taskInstanceId The ID of the user task instance for which the form model should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesTaskInstanceIdFormModelGet: async (taskInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskInstanceId' is not null or undefined
            if (taskInstanceId === null || taskInstanceId === undefined) {
                throw new RequiredError('taskInstanceId','Required parameter taskInstanceId was null or undefined when calling v1TaskInstancesTaskInstanceIdFormModelGet.');
            }
            const localVarPath = `/v1/task-instances/{taskInstanceId}/form/model`
                .replace(`{${"taskInstanceId"}}`, encodeURIComponent(String(taskInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the user task instance with the specified task instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET
         * @summary Retrieve task by ID
         * @param {string} taskInstanceId The ID of the user task instance which should be retrieved. The ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesTaskInstanceIdGet: async (taskInstanceId: string, $expand?: 'attributes', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskInstanceId' is not null or undefined
            if (taskInstanceId === null || taskInstanceId === undefined) {
                throw new RequiredError('taskInstanceId','Required parameter taskInstanceId was null or undefined when calling v1TaskInstancesTaskInstanceIdGet.');
            }
            const localVarPath = `/v1/task-instances/{taskInstanceId}`
                .replace(`{${"taskInstanceId"}}`, encodeURIComponent(String(taskInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates a user task\'s status, its properties (for example, subject), and its context with the attributes provided in the request body.    For more information, see SAP Cloud Platform Workflow Service documentation on the  [SAP Help Portal](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/fe41c54d61fa4710b34f2afe11b5d00e.html).  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: TASK_COMPLETE, TASK_UPDATE
         * @summary Update task by ID
         * @param {string} taskInstanceId The ID of the user task instance that is to be updated. The ID is 36 characters long.
         * @param {UpdateTaskInstancePayload} body Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesTaskInstanceIdPatch: async (taskInstanceId: string, body: UpdateTaskInstancePayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskInstanceId' is not null or undefined
            if (taskInstanceId === null || taskInstanceId === undefined) {
                throw new RequiredError('taskInstanceId','Required parameter taskInstanceId was null or undefined when calling v1TaskInstancesTaskInstanceIdPatch.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1TaskInstancesTaskInstanceIdPatch.');
            }
            const localVarPath = `/v1/task-instances/{taskInstanceId}`
                .replace(`{${"taskInstanceId"}}`, encodeURIComponent(String(taskInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Undeploys all versions of an existing workflow definition and deletes the corresponding workflow instances. Once the undeployment has started, you can no longer start a new workflow instance based on this workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: WORKFLOW_DEFINITION_UNDEPLOY 
         * @summary Delete workflow definition
         * @param {string} definitionId The ID of the workflow definition to be undeployed. The ID is at most 64 characters long.
         * @param {boolean} [cascade] Whether the undeployment of the workflow definition deletes active workflow instances. If the parameter is false or not specified and there are active workflow instances for the specified workflow definition,  the undeployment is rejected. An instance is considered active if it is in status RUNNING, ERRONEOUS, or SUSPENDED. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdDelete: async (definitionId: string, cascade?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling v1WorkflowDefinitionsDefinitionIdDelete.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if (cascade !== undefined) {
                localVarQueryParameter['cascade'] = cascade;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:   WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve workflow definition by ID
         * @param {string} definitionId The ID of the workflow definition for which the latest version should be retrieved. The ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdGet: async (definitionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling v1WorkflowDefinitionsDefinitionIdGet.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the model of the latest version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
         * @summary Retrieve workflow definition model by ID
         * @param {string} definitionId The workflow definition ID for which the latest model should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdModelGet: async (definitionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling v1WorkflowDefinitionsDefinitionIdModelGet.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}/model`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the default start context of the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
         * @summary Retrieve sample start context of workflow definition by ID
         * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdSampleContextsDefaultStartContextGet: async (definitionId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling v1WorkflowDefinitionsDefinitionIdSampleContextsDefaultStartContextGet.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}/sample-contexts/default-start-context`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of all deployed versions of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve all versions of workflow definition by ID
         * @param {string} definitionId The ID of the workflow definition for which all versions should be retrieved. The ID is at most 64 characters long.
         * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definition versions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdVersionsGet: async (definitionId: string, $orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling v1WorkflowDefinitionsDefinitionIdVersionsGet.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}/versions`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($inlinecount !== undefined) {
                localVarQueryParameter['$inlinecount'] = $inlinecount;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve workflow definition by ID and version number
         * @param {string} definitionId The ID of the workflow definition which should be retrieved. The ID is at most 64 characters long.
         * @param {string} versionNumber The version number of the workflow definition that should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberGet: async (definitionId: string, versionNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberGet.');
            }
            // verify required parameter 'versionNumber' is not null or undefined
            if (versionNumber === null || versionNumber === undefined) {
                throw new RequiredError('versionNumber','Required parameter versionNumber was null or undefined when calling v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberGet.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}/versions/{versionNumber}`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)))
                .replace(`{${"versionNumber"}}`, encodeURIComponent(String(versionNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the model of the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
         * @summary Retrieve workflow definition model by ID and version number
         * @param {string} definitionId The workflow definition ID for which the model should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberModelGet: async (definitionId: string, versionNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberModelGet.');
            }
            // verify required parameter 'versionNumber' is not null or undefined
            if (versionNumber === null || versionNumber === undefined) {
                throw new RequiredError('versionNumber','Required parameter versionNumber was null or undefined when calling v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberModelGet.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}/versions/{versionNumber}/model`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)))
                .replace(`{${"versionNumber"}}`, encodeURIComponent(String(versionNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the default start context of the specified version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
         * @summary Retrieve sample start context of workflow definition by ID and version number
         * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {string} versionNumber The version number for which the default start context should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberSampleContextsDefaultStartContextGet: async (definitionId: string, versionNumber: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'definitionId' is not null or undefined
            if (definitionId === null || definitionId === undefined) {
                throw new RequiredError('definitionId','Required parameter definitionId was null or undefined when calling v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberSampleContextsDefaultStartContextGet.');
            }
            // verify required parameter 'versionNumber' is not null or undefined
            if (versionNumber === null || versionNumber === undefined) {
                throw new RequiredError('versionNumber','Required parameter versionNumber was null or undefined when calling v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberSampleContextsDefaultStartContextGet.');
            }
            const localVarPath = `/v1/workflow-definitions/{definitionId}/versions/{versionNumber}/sample-contexts/default-start-context`
                .replace(`{${"definitionId"}}`, encodeURIComponent(String(definitionId)))
                .replace(`{${"versionNumber"}}`, encodeURIComponent(String(versionNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves a list of the latest version of each deployed workflow definition. The request can be parameterized.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve all workflow definitions
         * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsGet: async ($orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/workflow-definitions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($inlinecount !== undefined) {
                localVarQueryParameter['$inlinecount'] = $inlinecount;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves workflow instances by parameters. If no parameters are specified, all RUNNING, or ERRONEOUS instances are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If multiple parameters are specified for the same attribute or a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not given.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET 
         * @summary Retrieve all instances by query parameters
         * @param {'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc'} [$orderby] The attribute and direction by which workflow instances are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. If sort by definitionVersion is enabled, then definitionId is also added to the sorting query. If not specified, the results are sorted by the \&#39;startedAt\&#39; attribute, in descending order.   * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * definitionId asc - Ascending, from A to Z case-sensitive.  * definitionId desc - Descending, from Z to A case-sensitive.  * definitionVersion asc - Ascending, from A to Z case-sensitive.  * definitionVersion desc - Descending, from Z to A case-sensitive.  * startedAt asc - Ascending, from A to Z case-sensitive.  * startedAt desc - Descending, from Z to A case-sensitive.  * completedAt asc - Ascending, workflow instance completion or cancelation time from the oldest to the most recent, not yet COMPLETED workflow instances first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED workflow instance to the oldest ones, not yet COMPLETED workflow instances last.  * startedBy asc - Ascending, from A to Z case-sensitive.  * startedBy desc - Descending, from Z to A case-sensitive.  * subject asc - Ascending, from A to Z case-sensitive, workflow instances without subject first.  * subject desc - Descending, from Z to A case-sensitive, workflow instances without subject last.  * businessKey asc - Ascending, from A to Z case-sensitive, workflow instances without business key first.  * businessKey desc - Descending, from Z to A case-sensitive, workflow instances without business key last.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow instances, which match the search criteria, should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. 
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {string} [id] Specify the workflow instance ID. The workflow instance ID is 36 characters long.
         * @param {string} [definitionId] Specify the ID of the workflow definition. The ID is at most 64 characters long.
         * @param {string} [definitionVersion] Specify the version of the workflow definition.
         * @param {'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED'} [status] Specify the status of the workflow instance. The values are not case-sensitive.
         * @param {string} [startedAt] Specify at what time the workflow instance was started. Supports two date formats 1) yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2) yyyyMMddHHmmss.SSS.
         * @param {string} [startedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedAt] Specify at what time the workflow instance was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS 
         * @param {string} [completedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedBy] Specify the user who started the workflow instance, in UTF-8 encoding. The user ID is at most 255 characters long.
         * @param {string} [subject] Specify the subject of the workflow instance, in UTF-8 encoding. The subject of a workflow instance is limited to 255 characters.
         * @param {string} [containsText] Specify the text to search for, in UTF-8 encoding. Searches the id, definitionId, subject, startedBy, and businessKey attributes of the workflow instances. The maximum length of these attributes is 255 characters. 
         * @param {string} [businessKey] Specify the business key of the workflow instance, in UTF-8 encoding. The business key of a workflow instance is limited to 255 characters.
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters workflow instances by the value of the custom workflow attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom workflow attributes with different IDs are present in the URL, only workflow instances which contain all of them with the values specified will be returned as a response to the request. If a query by custom workflow attributes matches too many workflow definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesGet: async ($orderby?: 'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', id?: string, definitionId?: string, definitionVersion?: string, status?: 'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED', startedAt?: string, startedFrom?: string, startedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, startedBy?: string, subject?: string, containsText?: string, businessKey?: string, attributesExampleCustomAttribute?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/v1/workflow-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($orderby !== undefined) {
                localVarQueryParameter['$orderby'] = $orderby;
            }

            if ($skip !== undefined) {
                localVarQueryParameter['$skip'] = $skip;
            }

            if ($top !== undefined) {
                localVarQueryParameter['$top'] = $top;
            }

            if ($inlinecount !== undefined) {
                localVarQueryParameter['$inlinecount'] = $inlinecount;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (definitionId !== undefined) {
                localVarQueryParameter['definitionId'] = definitionId;
            }

            if (definitionVersion !== undefined) {
                localVarQueryParameter['definitionVersion'] = definitionVersion;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startedAt !== undefined) {
                localVarQueryParameter['startedAt'] = startedAt;
            }

            if (startedFrom !== undefined) {
                localVarQueryParameter['startedFrom'] = startedFrom;
            }

            if (startedUpTo !== undefined) {
                localVarQueryParameter['startedUpTo'] = startedUpTo;
            }

            if (completedAt !== undefined) {
                localVarQueryParameter['completedAt'] = completedAt;
            }

            if (completedFrom !== undefined) {
                localVarQueryParameter['completedFrom'] = completedFrom;
            }

            if (completedUpTo !== undefined) {
                localVarQueryParameter['completedUpTo'] = completedUpTo;
            }

            if (startedBy !== undefined) {
                localVarQueryParameter['startedBy'] = startedBy;
            }

            if (subject !== undefined) {
                localVarQueryParameter['subject'] = subject;
            }

            if (containsText !== undefined) {
                localVarQueryParameter['containsText'] = containsText;
            }

            if (businessKey !== undefined) {
                localVarQueryParameter['businessKey'] = businessKey;
            }

            if (attributesExampleCustomAttribute !== undefined) {
                localVarQueryParameter['attributes.ExampleCustomAttribute'] = attributesExampleCustomAttribute;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the given workflow instances according to the specified operations. Currently, the only operation supported is the deletion of workflow instances. You can at most specify 10000 instances to delete in one API call.  Roles permitted to execute this operation: - Global roles: WorkflowTenantOperator - Scope: WORKFLOW_INSTANCES_UPDATE
         * @summary Delete instance by ID
         * @param {Array<WorkflowInstancesUpdatePayload>} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesPatch: async (body: Array<WorkflowInstancesUpdatePayload>, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1WorkflowInstancesPatch.');
            }
            const localVarPath = `/v1/workflow-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Starts a new workflow instance of the provided workflow definition. Specify the ID of the workflow definition in the body. The workflow instance automatically starts based on the latest deployed version of the definition.  Roles permitted to execute this operation:  - Global roles: WorkflowInitiator  - Scope: WORKFLOW_INSTANCE_START 
         * @summary Start a new instance
         * @param {WorkflowInstanceStartPayload} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesPost: async (body: WorkflowInstanceStartPayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1WorkflowInstancesPost.');
            }
            const localVarPath = `/v1/workflow-instances`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the attachments information for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ATTACHMENTS
         * @summary Retrieve instance attachments
         * @param {string} workflowInstanceId The workflow instance ID for which the attachments should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/attachments`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Overrides the attachments information for a workflow instance independent of its status.  Take special care when using this API, because it will override the workflow attachments, that is, it might change the workflow   in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ATTACHMENTS
         * @summary Overwrite instance attachments
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the attachments should be overridden. The workflow instance ID is 36 characters long.
         * @param {AttachmentsContext} body Specify the new information according to the given schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut: async (workflowInstanceId: string, body: AttachmentsContext, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/attachments`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves custom workflow attributes for a workflow instance. Labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: WORKFLOW_INSTANCE_GET_ATTRIBUTES 
         * @summary Retrieve custom workflow attributes by workflow instance ID
         * @param {string} workflowInstanceId The ID of the workflow instance for which the custom workflow attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdAttributesGet: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdAttributesGet.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/attributes`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the workflow context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_CONTEXT
         * @summary Retrieve instance context
         * @param {string} workflowInstanceId The workflow instance ID for which the context should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdContextGet: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdContextGet.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/context`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies parts of the context for a workflow instance independent of its status.  Take special care when using this API, because it might change the workflow context in ways that are incompatible with the expectations  of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and make sure that  the execution has come to a halt, that is, that no further steps are being added to the execution log. Refer to PATCH on the parent resource  and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Update instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be modified. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the modified parts of the context. Note that the modification is limited by the allowed content length of the request body. The length is restricted to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdContextPatch: async (workflowInstanceId: string, body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdContextPatch.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdContextPatch.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/context`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Overrides the context for a workflow instance independent of its status.   Take special care when using this API, because it will override the workflow context, that is, it might change the workflow context  in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.  Refer to PATCH on the parent resource and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Overwrite instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be overridden. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the new context according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdContextPut: async (workflowInstanceId: string, body: object, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdContextPut.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdContextPut.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/context`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves current error messages for a workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowDeveloper, WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ERROR_MESSAGES 
         * @summary Retrieve error messages
         * @param {string} workflowInstanceId The workflow instance ID for which the error messages should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/error-messages`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves execution logs for a given workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_EXECUTION_LOGS 
         * @summary Retrieve execution logs
         * @param {string} workflowInstanceId The workflow instance ID for which the execution logs should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/execution-logs`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the workflow instance with the specified workflow instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET
         * @summary Retrieve workflow instance by ID
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be retrieved. The workflow instance ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdGet: async (workflowInstanceId: string, $expand?: 'attributes', options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdGet.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            if ($expand !== undefined) {
                localVarQueryParameter['$expand'] = $expand;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Modifies the properties of a given workflow instance, for example, sets its status to CANCELED or RUNNING.  Status change effects may not take effect immediately, due to asynchronous processing of the request. When you change the status to CANCELED, note the following:  * Workflow instances in CANCELED status are considered final, that is, no further changes are allowed. This is valid as well for other APIs and the processing according to the workflow definition.  * Workflow instances in CANCELED status stop processing as soon as the system allows.  When you are changing the status to SUSPENDED, note the following:  * Status SUSPENDED manually and temporarily suspends processing.  * Workflow instances in SUSPENDED status stop processing as soon as the system allows.  * Workflow instances remain in SUSPENDED status until a status change to RUNNING or CANCELED is requested.  * While the workflow instance status reported by the respective API might change with immediate effect, follow-up actions might only be successful, after asynchronous processing within the workflow instance actually has stopped. To check whether asynchronous processing is ongoing, analyze the execution logs or check the workflow definition structure.  When you are changing the status to RUNNING, note the following:  * For workflow instances in ERRONEOUS status, this retries the failed activities. If these activities continue failing, the workflow instance automatically moves again into ERRONEOUS status.  * If the workflow instance had previously been suspended while in ERRONEOUS status, failed activities, such as service tasks, are retried.   Roles permitted to execute this operation:  - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: WORKFLOW_INSTANCE_CANCEL, WORKFLOW_INSTANCE_RETRY_RESUME, WORKFLOW_INSTANCE_SUSPEND
         * @summary Update instance
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be modified. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceUpdatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdPatch: async (workflowInstanceId: string, body: WorkflowInstanceUpdatePayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdPatch.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdPatch.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Retrieves the instance-specific role assignments of the given workflow instance.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ROLES 
         * @summary Retrieve instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the roles should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdRolesGet: async (workflowInstanceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdRolesGet.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/roles`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Updates the instance-specific role assignments of the given workflow instance.  Any of the role assignment properties that is present in the request body will overwrite the existing assignments with the new assignments. Any properties that are either null or not present at all in the request body will leave the corresponding role assignments unchanged.  The maximum number of users and groups that can be assigned to each role is limited to 100.  The use of expressions as part of the role assignments (e.g. ${context.variable}) is only allowed for workflow instances that are not yet COMPLETED or CANCELED.  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ROLES  Examples: - Setting **viewerUsers: \"UserId1, UserId8\"** will remove all existing user assignments of the viewer role and then assign   only the two specified users to the role. - Setting **viewerUsers: \"\"** will remove all existing user assignments of the viewer role. - Specifying any non-null **viewerUsers** in the request body and leaving out **viewerGroups** will update the user   assignments and leave the group assignments unchanged.
         * @summary Update instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the role assignments should be updated. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceRolesUpdatePayload} body Specify new role assignments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdRolesPatch: async (workflowInstanceId: string, body: WorkflowInstanceRolesUpdatePayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'workflowInstanceId' is not null or undefined
            if (workflowInstanceId === null || workflowInstanceId === undefined) {
                throw new RequiredError('workflowInstanceId','Required parameter workflowInstanceId was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdRolesPatch.');
            }
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1WorkflowInstancesWorkflowInstanceIdRolesPatch.');
            }
            const localVarPath = `/v1/workflow-instances/{workflowInstanceId}/roles`
                .replace(`{${"workflowInstanceId"}}`, encodeURIComponent(String(workflowInstanceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SapCpWorkflowCfApi - functional programming interface
 * @export
 */
export const SapCpWorkflowCfApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Requests the export of workflow definitions metadata, form definitions metadata, workflow instances, and task instances. The file and data structures used are subject to change.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: DATA_EXPORT 
         * @summary Data Export
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1ExportGet(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1ExportGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Undeploys all versions of an existing form.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: FORM_DEFINITION_UNDEPLOY 
         * @summary Delete a form.
         * @param {string} formId The ID of the form you want to undeploy. The ID is at most 255 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FormsFormIdDelete(formId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1FormsFormIdDelete(formId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the form model with the specified form ID and revision.  Roles permitted to execute this operation:  - Global roles (retrieve start and task forms): WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Global roles (retrieve start forms only): WorkflowInitiator  - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and revision.
         * @param {string} formId The ID of the form for which the model should be retrieved.
         * @param {string} revisionId The revision of the form for which the model should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FormsFormIdRevisionsRevisionIdModelGet(formId: string, revisionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormModel>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1FormsFormIdRevisionsRevisionIdModelGet(formId, revisionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the model of the specified version of the specified form definition.    Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin, WorkflowDeveloper   - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and version number.
         * @param {string} formId The form ID for which the model should be retrieved. The form definition ID is at most 255 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FormsFormIdVersionsVersionNumberModelGet(formId: string, versionNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormModel>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1FormsFormIdVersionsVersionNumberModelGet(formId, versionNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of the latest version of each revision of each deployed form definition. The request can be parameterized.  The results are sorted by the \'createdAt\' attribute in descending order.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: FORM_DEFINITION_GET 
         * @summary Retrieve all form definitions
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the form definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {'start' | 'task'} [type] Specify whether the response should be filtered by the form type. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1FormsGet($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', type?: 'start' | 'task', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FormMetadata>>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1FormsGet($skip, $top, $inlinecount, type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Tracks the status of API requests, which the server executed asynchronously.          Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: JOB_STATUS_GET 
         * @summary Retrieve Job status
         * @param {string} jobId The ID of the job for which you check the status. Typically, the ID has been retrieved from another API request that was processed asynchronously. The ID is at most 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1JobsJobIdGet(jobId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Job>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1JobsJobIdGet(jobId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Sends a message to a set of workflow instances for consumption in intermediate message events. The message is identified by the name specified in the workflow model (request body parameter \'definitionId\')  and parameters identifying the workflow instances that should consume the message.   The message is consumed by the workflow instances that match the following criteria:  * The instance can be a specific match when using its workflow instance ID (request body parameter \'workflowInstanceId\').  Or the instance is a generic match when using the ID of the workflow model together with the business key (request body parameters \'workflowDefinitionId\' respectively \'businessKey\'). You can either use the specific or generic match but not both in the same call.  * The workflow instance is not in the SUSPENDED state.  * The workflow instance currently waits at the intermediate message event referring to the specified message.  The business key of a workflow instance matches if the business key specified in the request body is the same.    Roles permitted to execute this operation:  - Global roles:  WorkflowMessageSender  - Scope: MESSAGE_SEND
         * @summary Send message
         * @param {SendMessagePayload} body Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MessagesPost(body: SendMessagePayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConsumingWorkflowInstance>>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1MessagesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Completely erases all workflow definitions, all workflow instances, and all form definitions.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: DATA_PURGE 
         * @summary Purge instances and definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1PurgePost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1PurgePost(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves task definitions by query parameters.   A task definition is identified by the ID of the respective activity within a workflow definition (for example, usertask1) and the workflow definition ID.  The workflow definition ID is version independent. That means, this API assumes that task definitions are semantically the same if they span several  workflow versions and therefore have the same identifier. The latest workflow definition version is expected to contain the leading property values of the task definition.  At the moment, filtering is limited to the $skip and $top parameters for paging through the available task definitions.  The returned task definitions are sorted in descending order of their creation time.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin
         * @summary Retrieve definitions by query parameters
         * @param {number} [$skip] The number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. You can use this parameter only once. Refer also to the $top parameter.
         * @param {number} [$top] The number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. You can use this parameter only once. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the task definitions should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. You can use this parameter only once.
         * @param {'attributeDefinitions'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributeDefinitions\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributeDefinitions\&#39; field is not included into the output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where the corresponding task definition exists.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TaskDefinitionsGet($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributeDefinitions', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<object>>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1TaskDefinitionsGet($skip, $top, $inlinecount, $expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves user task instances by parameters. If no parameters are specified, all instances with status READY, RESERVED, CANCELED, or COMPLETED are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not specified. By default, returned tasks are sorted by creation time in ascending order.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET
         * @summary Retrieve instances by query parameters
         * @param {number} [$skip] The number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. You can use this parameter only once. Refer also to the $top parameter.
         * @param {number} [$top] The number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. You can use this parameter only once. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the task instances, which match the search criteria, should be returned as a value  of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. You can use this parameter only once.
         * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {'claimedAt asc' | 'claimedAt desc' | 'completedAt asc' | 'completedAt desc' | 'createdAt asc' | 'createdAt desc' | 'lastChangedAt asc' | 'lastChangedAt desc' | 'dueDate asc' | 'dueDate desc' | 'subject asc' | 'subject desc' | 'description asc' | 'description desc' | 'activityId asc' | 'activityId desc' | 'id asc' | 'id desc' | 'processor asc' | 'processor desc' | 'workflowDefinitionId asc' | 'workflowDefinitionId desc' | 'workflowInstanceId asc' | 'workflowInstanceId desc' | 'priority asc' | 'priority desc'} [$orderby] The attribute and direction by which tasks are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. To stabilize the order of tasks the implicit second ordering parameter \&#39;createdAt asc\&#39; is applied.   * claimedAt asc - Ascending, task claim time from the oldest to the most recent, tasks with status READY (not yet claimed) first.  * claimedAt desc - Descending, from the most recently claimed tasks to the oldest ones, tasks with status READY (not yet claimed) last.  * completedAt asc - Ascending, task completion or cancelation time from the oldest to the most recent, not yet COMPLETED tasks first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED tasks to the oldest ones, not yet COMPLETED tasks last.  * createdAt asc - Ascending, task creation time from the oldest to the most recent.  * createdAt desc - Descending, from the most recently created tasks to the oldest ones.  * lastChangedAt asc - Ascending, task last change time from the oldest to the most recent.  * lastChangedAt desc - Descending, from the most recently changed tasks to the oldest ones.               * dueDate asc - Ascending, tasks due date from the oldest to the most distant in future ones, tasks without due date first.  * dueDate desc - Descending, tasks due date from the most distant in future to the oldest ones, tasks without due date last.  * subject asc - Ascending, from A to Z case-sensitive.  * subject desc - Descending, from Z to A case-sensitive.  * description asc - Ascending, from A to Z case-sensitive, tasks without description first.  * description desc - Descending, from Z to A case-sensitive, tasks without description last.  * activityId asc - Ascending, from A to Z case-sensitive.  * activityId desc - Descending, from Z to A case-sensitive.  * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * processor asc - Ascending, from A to Z case-sensitive, tasks without processor first.  * processor desc - Descending, from Z to A case-sensitive, tasks without processor last.  * workflowDefinitionId asc - Ascending, from A to Z case-sensitive.  * workflowDefinitionId desc - Descending, from Z to A case-sensitive.  * workflowInstanceId asc - Ascending, from A to Z case-sensitive.  * workflowInstanceId desc - Descending, from Z to A case-sensitive.  * priority asc - Ascending, tasks priority from lowest to highest.  * priority desc - Descending, tasks priority from highest to lowest.
         * @param {string} [workflowInstanceId] The workflow instance ID for which the user task instances are returned. The workflow instance ID is 36 characters long.
         * @param {string} [workflowDefinitionId] The workflow definition ID for which the user task instances are returned.
         * @param {string} [processor] The processor of the user task instance.
         * @param {string} [id] The unique ID of the user task instance. The user task instance ID is 36 characters long.
         * @param {string} [activityId] The activityId of the user task instance. This field represents the ID of the user task definition.
         * @param {string} [description] The description of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
         * @param {string} [subject] The subject of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
         * @param {string} [createdAt] Time when the user task instance has been created. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;createdFrom\&#39; and \&#39;createdUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [createdFrom] The start time (inclusive) of the time range when the user task instance was created. Must be less or equal to the value of the \&#39;createdUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [createdUpTo] The end time (inclusive) of the time range when the user task instance was created. Must be greater or equal to the value of the \&#39;createdFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [claimedAt] Time when the user task instance was claimed. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;claimedFrom\&#39; and \&#39;claimedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [claimedFrom] The start time (inclusive) of the time range when the user task instance was claimed. Must be less or equal to the value of the \&#39;claimedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [claimedUpTo] The end time (inclusive) of the time range when the user task instance was claimed. Must be greater or equal to the value of the \&#39;claimedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [completedAt] Time when the user task instance was COMPLETED or CANCELED. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;completedFrom\&#39; and \&#39;completedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [completedFrom] The start time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be less or equal to the value of the \&#39;completedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [completedUpTo] The end time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be greater or equal to the value of the \&#39;completedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [lastChangedAt] Time when the user task instance has been changed for the last time. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;lastChangedFrom\&#39; and \&#39;lastChangedTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [lastChangedFrom] The start time (inclusive) of the time range when the user task instance was changed for the last time. Must be less or equal to the value of the \&#39;lastChangedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [lastChangedUpTo] The end time (inclusive) of the time range when the user task instance was changed for the last time. Must be greater or equal to the value of the \&#39;lastChangedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [dueDate] The due date of the user task instance. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;dueDateFrom\&#39; and \&#39;dueDateUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [dueDateFrom] The start time (inclusive) of the due date time range for the user task instance. Must be less or equal to the value of the \&#39;dueDateUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [dueDateUpTo] The end time (inclusive) of the due date time range for the user task instance. Must be greater or equal to the \&#39;dueDateFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {'LOW' | 'MEDIUM' | 'HIGH' | 'VERY_HIGH'} [priority] The priority of the user task instance. The values are case-insensitive. 
         * @param {'READY' | 'RESERVED' | 'COMPLETED' | 'CANCELED'} [status] The status of the user task instance. The values are case-insensitive. 
         * @param {string} [recipientUsers] The users who must be among the recipient users of the user task instance. A user task instance has to match at least one of the recipient users specified. Specify the users by repeating this parameter multiple times, with one user each.  
         * @param {string} [recipientGroups] The groups which must be among the recipient groups of the user task instance. A user task instance has to match at least one of the recipient groups specified. Specify the groups by repeating this parameter multiple times, with one user each.  
         * @param {string} [containsText] Text, which should be contained in at least one of the following fields of the user task instance:   * subject  * description  * activityId  * id  * processor  * workflowDefinitionId  * workflowInstanceId  Performed filtering is case-insensitive. You must not use this parameter more than once. 
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters task instances by the value of the custom task attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom task attributes with different IDs are present in the URL, only tasks which contain all of them with the values specified will be returned as a response to the request. If a query by custom task attributes matches too many task definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
         * @param {string} [definitionId] The definition ID of the user task. It consists of the ID of the task defined in the workflow definition (task definition ID) as well as the workflow definition ID delimited by an \&#39;@\&#39; sign. For optimal performance, specify this parameter when searching for tasks by custom task attributes. If the custom task attribute IDs from the query match more than 50 task definitions, you have to specify one or more task definition IDs when searching for tasks by custom task attributes. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TaskInstancesGet($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', $orderby?: 'claimedAt asc' | 'claimedAt desc' | 'completedAt asc' | 'completedAt desc' | 'createdAt asc' | 'createdAt desc' | 'lastChangedAt asc' | 'lastChangedAt desc' | 'dueDate asc' | 'dueDate desc' | 'subject asc' | 'subject desc' | 'description asc' | 'description desc' | 'activityId asc' | 'activityId desc' | 'id asc' | 'id desc' | 'processor asc' | 'processor desc' | 'workflowDefinitionId asc' | 'workflowDefinitionId desc' | 'workflowInstanceId asc' | 'workflowInstanceId desc' | 'priority asc' | 'priority desc', workflowInstanceId?: string, workflowDefinitionId?: string, processor?: string, id?: string, activityId?: string, description?: string, subject?: string, createdAt?: string, createdFrom?: string, createdUpTo?: string, claimedAt?: string, claimedFrom?: string, claimedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, lastChangedAt?: string, lastChangedFrom?: string, lastChangedUpTo?: string, dueDate?: string, dueDateFrom?: string, dueDateUpTo?: string, priority?: 'LOW' | 'MEDIUM' | 'HIGH' | 'VERY_HIGH', status?: 'READY' | 'RESERVED' | 'COMPLETED' | 'CANCELED', recipientUsers?: string, recipientGroups?: string, containsText?: string, attributesExampleCustomAttribute?: string, definitionId?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskInstance>>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1TaskInstancesGet($skip, $top, $inlinecount, $expand, $orderby, workflowInstanceId, workflowDefinitionId, processor, id, activityId, description, subject, createdAt, createdFrom, createdUpTo, claimedAt, claimedFrom, claimedUpTo, completedAt, completedFrom, completedUpTo, lastChangedAt, lastChangedFrom, lastChangedUpTo, dueDate, dueDateFrom, dueDateUpTo, priority, status, recipientUsers, recipientGroups, containsText, attributesExampleCustomAttribute, definitionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the attachments information of a workflow instance via the given user task.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_ATTACHMENTS
         * @summary Retrieve task instance attachments
         * @param {string} taskInstanceId The ID of the user task via which the attachments information of the corresponding workflow instance should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TaskInstancesTaskInstanceIdAttachmentsGet(taskInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentsContext>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1TaskInstancesTaskInstanceIdAttachmentsGet(taskInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves custom task attributes of a user task. Labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET_ATTRIBUTES 
         * @summary Retrieve custom task attributes by task instance ID
         * @param {string} taskInstanceId The ID of the user task instance for which the custom task attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TaskInstancesTaskInstanceIdAttributesGet(taskInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomAttribute>>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1TaskInstancesTaskInstanceIdAttributesGet(taskInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the task context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context of a user task.  Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_CONTEXT
         * @summary Retrieve task context by ID
         * @param {string} taskInstanceId The ID of the user task for which the context should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TaskInstancesTaskInstanceIdContextGet(taskInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1TaskInstancesTaskInstanceIdContextGet(taskInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the form metadata of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM 
         * @summary Retrieve form metadata of the given task instance.
         * @param {string} taskInstanceId The ID of the user task instance for which the form metadata should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TaskInstancesTaskInstanceIdFormGet(taskInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormMetadata>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1TaskInstancesTaskInstanceIdFormGet(taskInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the form model of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM_MODEL 
         * @summary Retrieve form model of the given task instance.
         * @param {string} taskInstanceId The ID of the user task instance for which the form model should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TaskInstancesTaskInstanceIdFormModelGet(taskInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FormModel>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1TaskInstancesTaskInstanceIdFormModelGet(taskInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the user task instance with the specified task instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET
         * @summary Retrieve task by ID
         * @param {string} taskInstanceId The ID of the user task instance which should be retrieved. The ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TaskInstancesTaskInstanceIdGet(taskInstanceId: string, $expand?: 'attributes', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskInstance>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1TaskInstancesTaskInstanceIdGet(taskInstanceId, $expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates a user task\'s status, its properties (for example, subject), and its context with the attributes provided in the request body.    For more information, see SAP Cloud Platform Workflow Service documentation on the  [SAP Help Portal](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/fe41c54d61fa4710b34f2afe11b5d00e.html).  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: TASK_COMPLETE, TASK_UPDATE
         * @summary Update task by ID
         * @param {string} taskInstanceId The ID of the user task instance that is to be updated. The ID is 36 characters long.
         * @param {UpdateTaskInstancePayload} body Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1TaskInstancesTaskInstanceIdPatch(taskInstanceId: string, body: UpdateTaskInstancePayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1TaskInstancesTaskInstanceIdPatch(taskInstanceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Undeploys all versions of an existing workflow definition and deletes the corresponding workflow instances. Once the undeployment has started, you can no longer start a new workflow instance based on this workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: WORKFLOW_DEFINITION_UNDEPLOY 
         * @summary Delete workflow definition
         * @param {string} definitionId The ID of the workflow definition to be undeployed. The ID is at most 64 characters long.
         * @param {boolean} [cascade] Whether the undeployment of the workflow definition deletes active workflow instances. If the parameter is false or not specified and there are active workflow instances for the specified workflow definition,  the undeployment is rejected. An instance is considered active if it is in status RUNNING, ERRONEOUS, or SUSPENDED. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowDefinitionsDefinitionIdDelete(definitionId: string, cascade?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowDefinitionsDefinitionIdDelete(definitionId, cascade, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:   WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve workflow definition by ID
         * @param {string} definitionId The ID of the workflow definition for which the latest version should be retrieved. The ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowDefinitionsDefinitionIdGet(definitionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowDefinition>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowDefinitionsDefinitionIdGet(definitionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the model of the latest version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
         * @summary Retrieve workflow definition model by ID
         * @param {string} definitionId The workflow definition ID for which the latest model should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowDefinitionsDefinitionIdModelGet(definitionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowModel>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowDefinitionsDefinitionIdModelGet(definitionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the default start context of the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
         * @summary Retrieve sample start context of workflow definition by ID
         * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowDefinitionsDefinitionIdSampleContextsDefaultStartContextGet(definitionId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SampleContext>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowDefinitionsDefinitionIdSampleContextsDefaultStartContextGet(definitionId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of all deployed versions of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve all versions of workflow definition by ID
         * @param {string} definitionId The ID of the workflow definition for which all versions should be retrieved. The ID is at most 64 characters long.
         * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definition versions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowDefinitionsDefinitionIdVersionsGet(definitionId: string, $orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowDefinitionVersion>>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowDefinitionsDefinitionIdVersionsGet(definitionId, $orderby, $skip, $top, $inlinecount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve workflow definition by ID and version number
         * @param {string} definitionId The ID of the workflow definition which should be retrieved. The ID is at most 64 characters long.
         * @param {string} versionNumber The version number of the workflow definition that should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberGet(definitionId: string, versionNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowDefinitionVersion>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberGet(definitionId, versionNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the model of the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
         * @summary Retrieve workflow definition model by ID and version number
         * @param {string} definitionId The workflow definition ID for which the model should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberModelGet(definitionId: string, versionNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowModel>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberModelGet(definitionId, versionNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the default start context of the specified version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
         * @summary Retrieve sample start context of workflow definition by ID and version number
         * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {string} versionNumber The version number for which the default start context should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberSampleContextsDefaultStartContextGet(definitionId: string, versionNumber: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SampleContext>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberSampleContextsDefaultStartContextGet(definitionId, versionNumber, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves a list of the latest version of each deployed workflow definition. The request can be parameterized.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve all workflow definitions
         * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowDefinitionsGet($orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowDefinition>>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowDefinitionsGet($orderby, $skip, $top, $inlinecount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves workflow instances by parameters. If no parameters are specified, all RUNNING, or ERRONEOUS instances are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If multiple parameters are specified for the same attribute or a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not given.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET 
         * @summary Retrieve all instances by query parameters
         * @param {'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc'} [$orderby] The attribute and direction by which workflow instances are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. If sort by definitionVersion is enabled, then definitionId is also added to the sorting query. If not specified, the results are sorted by the \&#39;startedAt\&#39; attribute, in descending order.   * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * definitionId asc - Ascending, from A to Z case-sensitive.  * definitionId desc - Descending, from Z to A case-sensitive.  * definitionVersion asc - Ascending, from A to Z case-sensitive.  * definitionVersion desc - Descending, from Z to A case-sensitive.  * startedAt asc - Ascending, from A to Z case-sensitive.  * startedAt desc - Descending, from Z to A case-sensitive.  * completedAt asc - Ascending, workflow instance completion or cancelation time from the oldest to the most recent, not yet COMPLETED workflow instances first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED workflow instance to the oldest ones, not yet COMPLETED workflow instances last.  * startedBy asc - Ascending, from A to Z case-sensitive.  * startedBy desc - Descending, from Z to A case-sensitive.  * subject asc - Ascending, from A to Z case-sensitive, workflow instances without subject first.  * subject desc - Descending, from Z to A case-sensitive, workflow instances without subject last.  * businessKey asc - Ascending, from A to Z case-sensitive, workflow instances without business key first.  * businessKey desc - Descending, from Z to A case-sensitive, workflow instances without business key last.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow instances, which match the search criteria, should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. 
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {string} [id] Specify the workflow instance ID. The workflow instance ID is 36 characters long.
         * @param {string} [definitionId] Specify the ID of the workflow definition. The ID is at most 64 characters long.
         * @param {string} [definitionVersion] Specify the version of the workflow definition.
         * @param {'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED'} [status] Specify the status of the workflow instance. The values are not case-sensitive.
         * @param {string} [startedAt] Specify at what time the workflow instance was started. Supports two date formats 1) yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2) yyyyMMddHHmmss.SSS.
         * @param {string} [startedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedAt] Specify at what time the workflow instance was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS 
         * @param {string} [completedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedBy] Specify the user who started the workflow instance, in UTF-8 encoding. The user ID is at most 255 characters long.
         * @param {string} [subject] Specify the subject of the workflow instance, in UTF-8 encoding. The subject of a workflow instance is limited to 255 characters.
         * @param {string} [containsText] Specify the text to search for, in UTF-8 encoding. Searches the id, definitionId, subject, startedBy, and businessKey attributes of the workflow instances. The maximum length of these attributes is 255 characters. 
         * @param {string} [businessKey] Specify the business key of the workflow instance, in UTF-8 encoding. The business key of a workflow instance is limited to 255 characters.
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters workflow instances by the value of the custom workflow attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom workflow attributes with different IDs are present in the URL, only workflow instances which contain all of them with the values specified will be returned as a response to the request. If a query by custom workflow attributes matches too many workflow definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesGet($orderby?: 'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', id?: string, definitionId?: string, definitionVersion?: string, status?: 'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED', startedAt?: string, startedFrom?: string, startedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, startedBy?: string, subject?: string, containsText?: string, businessKey?: string, attributesExampleCustomAttribute?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowInstance>>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesGet($orderby, $skip, $top, $inlinecount, $expand, id, definitionId, definitionVersion, status, startedAt, startedFrom, startedUpTo, completedAt, completedFrom, completedUpTo, startedBy, subject, containsText, businessKey, attributesExampleCustomAttribute, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies the given workflow instances according to the specified operations. Currently, the only operation supported is the deletion of workflow instances. You can at most specify 10000 instances to delete in one API call.  Roles permitted to execute this operation: - Global roles: WorkflowTenantOperator - Scope: WORKFLOW_INSTANCES_UPDATE
         * @summary Delete instance by ID
         * @param {Array<WorkflowInstancesUpdatePayload>} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesPatch(body: Array<WorkflowInstancesUpdatePayload>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesPatch(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Starts a new workflow instance of the provided workflow definition. Specify the ID of the workflow definition in the body. The workflow instance automatically starts based on the latest deployed version of the definition.  Roles permitted to execute this operation:  - Global roles: WorkflowInitiator  - Scope: WORKFLOW_INSTANCE_START 
         * @summary Start a new instance
         * @param {WorkflowInstanceStartPayload} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesPost(body: WorkflowInstanceStartPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowInstance>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the attachments information for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ATTACHMENTS
         * @summary Retrieve instance attachments
         * @param {string} workflowInstanceId The workflow instance ID for which the attachments should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AttachmentsContext>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Overrides the attachments information for a workflow instance independent of its status.  Take special care when using this API, because it will override the workflow attachments, that is, it might change the workflow   in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ATTACHMENTS
         * @summary Overwrite instance attachments
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the attachments should be overridden. The workflow instance ID is 36 characters long.
         * @param {AttachmentsContext} body Specify the new information according to the given schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut(workflowInstanceId: string, body: AttachmentsContext, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut(workflowInstanceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves custom workflow attributes for a workflow instance. Labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: WORKFLOW_INSTANCE_GET_ATTRIBUTES 
         * @summary Retrieve custom workflow attributes by workflow instance ID
         * @param {string} workflowInstanceId The ID of the workflow instance for which the custom workflow attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdAttributesGet(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<CustomAttribute>>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdAttributesGet(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the workflow context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_CONTEXT
         * @summary Retrieve instance context
         * @param {string} workflowInstanceId The workflow instance ID for which the context should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdContextGet(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdContextGet(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies parts of the context for a workflow instance independent of its status.  Take special care when using this API, because it might change the workflow context in ways that are incompatible with the expectations  of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and make sure that  the execution has come to a halt, that is, that no further steps are being added to the execution log. Refer to PATCH on the parent resource  and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Update instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be modified. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the modified parts of the context. Note that the modification is limited by the allowed content length of the request body. The length is restricted to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdContextPatch(workflowInstanceId: string, body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdContextPatch(workflowInstanceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Overrides the context for a workflow instance independent of its status.   Take special care when using this API, because it will override the workflow context, that is, it might change the workflow context  in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.  Refer to PATCH on the parent resource and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Overwrite instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be overridden. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the new context according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdContextPut(workflowInstanceId: string, body: object, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdContextPut(workflowInstanceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves current error messages for a workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowDeveloper, WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ERROR_MESSAGES 
         * @summary Retrieve error messages
         * @param {string} workflowInstanceId The workflow instance ID for which the error messages should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowInstanceErrorMessage>>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves execution logs for a given workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_EXECUTION_LOGS 
         * @summary Retrieve execution logs
         * @param {string} workflowInstanceId The workflow instance ID for which the execution logs should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorkflowInstanceExecutionLog>>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the workflow instance with the specified workflow instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET
         * @summary Retrieve workflow instance by ID
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be retrieved. The workflow instance ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdGet(workflowInstanceId: string, $expand?: 'attributes', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowInstance>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdGet(workflowInstanceId, $expand, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Modifies the properties of a given workflow instance, for example, sets its status to CANCELED or RUNNING.  Status change effects may not take effect immediately, due to asynchronous processing of the request. When you change the status to CANCELED, note the following:  * Workflow instances in CANCELED status are considered final, that is, no further changes are allowed. This is valid as well for other APIs and the processing according to the workflow definition.  * Workflow instances in CANCELED status stop processing as soon as the system allows.  When you are changing the status to SUSPENDED, note the following:  * Status SUSPENDED manually and temporarily suspends processing.  * Workflow instances in SUSPENDED status stop processing as soon as the system allows.  * Workflow instances remain in SUSPENDED status until a status change to RUNNING or CANCELED is requested.  * While the workflow instance status reported by the respective API might change with immediate effect, follow-up actions might only be successful, after asynchronous processing within the workflow instance actually has stopped. To check whether asynchronous processing is ongoing, analyze the execution logs or check the workflow definition structure.  When you are changing the status to RUNNING, note the following:  * For workflow instances in ERRONEOUS status, this retries the failed activities. If these activities continue failing, the workflow instance automatically moves again into ERRONEOUS status.  * If the workflow instance had previously been suspended while in ERRONEOUS status, failed activities, such as service tasks, are retried.   Roles permitted to execute this operation:  - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: WORKFLOW_INSTANCE_CANCEL, WORKFLOW_INSTANCE_RETRY_RESUME, WORKFLOW_INSTANCE_SUSPEND
         * @summary Update instance
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be modified. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceUpdatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdPatch(workflowInstanceId: string, body: WorkflowInstanceUpdatePayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdPatch(workflowInstanceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Retrieves the instance-specific role assignments of the given workflow instance.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ROLES 
         * @summary Retrieve instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the roles should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdRolesGet(workflowInstanceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorkflowInstanceRoles>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdRolesGet(workflowInstanceId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Updates the instance-specific role assignments of the given workflow instance.  Any of the role assignment properties that is present in the request body will overwrite the existing assignments with the new assignments. Any properties that are either null or not present at all in the request body will leave the corresponding role assignments unchanged.  The maximum number of users and groups that can be assigned to each role is limited to 100.  The use of expressions as part of the role assignments (e.g. ${context.variable}) is only allowed for workflow instances that are not yet COMPLETED or CANCELED.  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ROLES  Examples: - Setting **viewerUsers: \"UserId1, UserId8\"** will remove all existing user assignments of the viewer role and then assign   only the two specified users to the role. - Setting **viewerUsers: \"\"** will remove all existing user assignments of the viewer role. - Specifying any non-null **viewerUsers** in the request body and leaving out **viewerGroups** will update the user   assignments and leave the group assignments unchanged.
         * @summary Update instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the role assignments should be updated. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceRolesUpdatePayload} body Specify new role assignments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1WorkflowInstancesWorkflowInstanceIdRolesPatch(workflowInstanceId: string, body: WorkflowInstanceRolesUpdatePayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await SapCpWorkflowCfApiAxiosParamCreator(configuration).v1WorkflowInstancesWorkflowInstanceIdRolesPatch(workflowInstanceId, body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SapCpWorkflowCfApi - factory interface
 * @export
 */
export const SapCpWorkflowCfApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Requests the export of workflow definitions metadata, form definitions metadata, workflow instances, and task instances. The file and data structures used are subject to change.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: DATA_EXPORT 
         * @summary Data Export
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1ExportGet(options?: any): AxiosPromise<void> {
            return SapCpWorkflowCfApiFp(configuration).v1ExportGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Undeploys all versions of an existing form.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: FORM_DEFINITION_UNDEPLOY 
         * @summary Delete a form.
         * @param {string} formId The ID of the form you want to undeploy. The ID is at most 255 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsFormIdDelete(formId: string, options?: any): AxiosPromise<void> {
            return SapCpWorkflowCfApiFp(configuration).v1FormsFormIdDelete(formId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the form model with the specified form ID and revision.  Roles permitted to execute this operation:  - Global roles (retrieve start and task forms): WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Global roles (retrieve start forms only): WorkflowInitiator  - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and revision.
         * @param {string} formId The ID of the form for which the model should be retrieved.
         * @param {string} revisionId The revision of the form for which the model should be retrieved.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsFormIdRevisionsRevisionIdModelGet(formId: string, revisionId: string, options?: any): AxiosPromise<FormModel> {
            return SapCpWorkflowCfApiFp(configuration).v1FormsFormIdRevisionsRevisionIdModelGet(formId, revisionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the model of the specified version of the specified form definition.    Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin, WorkflowDeveloper   - Scope: FORM_DEFINITION_GET_MODEL 
         * @summary Retrieve form model by ID and version number.
         * @param {string} formId The form ID for which the model should be retrieved. The form definition ID is at most 255 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsFormIdVersionsVersionNumberModelGet(formId: string, versionNumber: string, options?: any): AxiosPromise<FormModel> {
            return SapCpWorkflowCfApiFp(configuration).v1FormsFormIdVersionsVersionNumberModelGet(formId, versionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of the latest version of each revision of each deployed form definition. The request can be parameterized.  The results are sorted by the \'createdAt\' attribute in descending order.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: FORM_DEFINITION_GET 
         * @summary Retrieve all form definitions
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the form definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {'start' | 'task'} [type] Specify whether the response should be filtered by the form type. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1FormsGet($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', type?: 'start' | 'task', options?: any): AxiosPromise<Array<FormMetadata>> {
            return SapCpWorkflowCfApiFp(configuration).v1FormsGet($skip, $top, $inlinecount, type, options).then((request) => request(axios, basePath));
        },
        /**
         * Tracks the status of API requests, which the server executed asynchronously.          Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: JOB_STATUS_GET 
         * @summary Retrieve Job status
         * @param {string} jobId The ID of the job for which you check the status. Typically, the ID has been retrieved from another API request that was processed asynchronously. The ID is at most 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1JobsJobIdGet(jobId: string, options?: any): AxiosPromise<Job> {
            return SapCpWorkflowCfApiFp(configuration).v1JobsJobIdGet(jobId, options).then((request) => request(axios, basePath));
        },
        /**
         * Sends a message to a set of workflow instances for consumption in intermediate message events. The message is identified by the name specified in the workflow model (request body parameter \'definitionId\')  and parameters identifying the workflow instances that should consume the message.   The message is consumed by the workflow instances that match the following criteria:  * The instance can be a specific match when using its workflow instance ID (request body parameter \'workflowInstanceId\').  Or the instance is a generic match when using the ID of the workflow model together with the business key (request body parameters \'workflowDefinitionId\' respectively \'businessKey\'). You can either use the specific or generic match but not both in the same call.  * The workflow instance is not in the SUSPENDED state.  * The workflow instance currently waits at the intermediate message event referring to the specified message.  The business key of a workflow instance matches if the business key specified in the request body is the same.    Roles permitted to execute this operation:  - Global roles:  WorkflowMessageSender  - Scope: MESSAGE_SEND
         * @summary Send message
         * @param {SendMessagePayload} body Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MessagesPost(body: SendMessagePayload, options?: any): AxiosPromise<Array<ConsumingWorkflowInstance>> {
            return SapCpWorkflowCfApiFp(configuration).v1MessagesPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Completely erases all workflow definitions, all workflow instances, and all form definitions.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: DATA_PURGE 
         * @summary Purge instances and definitions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1PurgePost(options?: any): AxiosPromise<void> {
            return SapCpWorkflowCfApiFp(configuration).v1PurgePost(options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves task definitions by query parameters.   A task definition is identified by the ID of the respective activity within a workflow definition (for example, usertask1) and the workflow definition ID.  The workflow definition ID is version independent. That means, this API assumes that task definitions are semantically the same if they span several  workflow versions and therefore have the same identifier. The latest workflow definition version is expected to contain the leading property values of the task definition.  At the moment, filtering is limited to the $skip and $top parameters for paging through the available task definitions.  The returned task definitions are sorted in descending order of their creation time.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin
         * @summary Retrieve definitions by query parameters
         * @param {number} [$skip] The number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. You can use this parameter only once. Refer also to the $top parameter.
         * @param {number} [$top] The number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. You can use this parameter only once. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the task definitions should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. You can use this parameter only once.
         * @param {'attributeDefinitions'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributeDefinitions\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributeDefinitions\&#39; field is not included into the output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where the corresponding task definition exists.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskDefinitionsGet($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributeDefinitions', options?: any): AxiosPromise<Array<object>> {
            return SapCpWorkflowCfApiFp(configuration).v1TaskDefinitionsGet($skip, $top, $inlinecount, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves user task instances by parameters. If no parameters are specified, all instances with status READY, RESERVED, CANCELED, or COMPLETED are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not specified. By default, returned tasks are sorted by creation time in ascending order.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET
         * @summary Retrieve instances by query parameters
         * @param {number} [$skip] The number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. You can use this parameter only once. Refer also to the $top parameter.
         * @param {number} [$top] The number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. You can use this parameter only once. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the task instances, which match the search criteria, should be returned as a value  of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. You can use this parameter only once.
         * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {'claimedAt asc' | 'claimedAt desc' | 'completedAt asc' | 'completedAt desc' | 'createdAt asc' | 'createdAt desc' | 'lastChangedAt asc' | 'lastChangedAt desc' | 'dueDate asc' | 'dueDate desc' | 'subject asc' | 'subject desc' | 'description asc' | 'description desc' | 'activityId asc' | 'activityId desc' | 'id asc' | 'id desc' | 'processor asc' | 'processor desc' | 'workflowDefinitionId asc' | 'workflowDefinitionId desc' | 'workflowInstanceId asc' | 'workflowInstanceId desc' | 'priority asc' | 'priority desc'} [$orderby] The attribute and direction by which tasks are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. To stabilize the order of tasks the implicit second ordering parameter \&#39;createdAt asc\&#39; is applied.   * claimedAt asc - Ascending, task claim time from the oldest to the most recent, tasks with status READY (not yet claimed) first.  * claimedAt desc - Descending, from the most recently claimed tasks to the oldest ones, tasks with status READY (not yet claimed) last.  * completedAt asc - Ascending, task completion or cancelation time from the oldest to the most recent, not yet COMPLETED tasks first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED tasks to the oldest ones, not yet COMPLETED tasks last.  * createdAt asc - Ascending, task creation time from the oldest to the most recent.  * createdAt desc - Descending, from the most recently created tasks to the oldest ones.  * lastChangedAt asc - Ascending, task last change time from the oldest to the most recent.  * lastChangedAt desc - Descending, from the most recently changed tasks to the oldest ones.               * dueDate asc - Ascending, tasks due date from the oldest to the most distant in future ones, tasks without due date first.  * dueDate desc - Descending, tasks due date from the most distant in future to the oldest ones, tasks without due date last.  * subject asc - Ascending, from A to Z case-sensitive.  * subject desc - Descending, from Z to A case-sensitive.  * description asc - Ascending, from A to Z case-sensitive, tasks without description first.  * description desc - Descending, from Z to A case-sensitive, tasks without description last.  * activityId asc - Ascending, from A to Z case-sensitive.  * activityId desc - Descending, from Z to A case-sensitive.  * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * processor asc - Ascending, from A to Z case-sensitive, tasks without processor first.  * processor desc - Descending, from Z to A case-sensitive, tasks without processor last.  * workflowDefinitionId asc - Ascending, from A to Z case-sensitive.  * workflowDefinitionId desc - Descending, from Z to A case-sensitive.  * workflowInstanceId asc - Ascending, from A to Z case-sensitive.  * workflowInstanceId desc - Descending, from Z to A case-sensitive.  * priority asc - Ascending, tasks priority from lowest to highest.  * priority desc - Descending, tasks priority from highest to lowest.
         * @param {string} [workflowInstanceId] The workflow instance ID for which the user task instances are returned. The workflow instance ID is 36 characters long.
         * @param {string} [workflowDefinitionId] The workflow definition ID for which the user task instances are returned.
         * @param {string} [processor] The processor of the user task instance.
         * @param {string} [id] The unique ID of the user task instance. The user task instance ID is 36 characters long.
         * @param {string} [activityId] The activityId of the user task instance. This field represents the ID of the user task definition.
         * @param {string} [description] The description of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
         * @param {string} [subject] The subject of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
         * @param {string} [createdAt] Time when the user task instance has been created. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;createdFrom\&#39; and \&#39;createdUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [createdFrom] The start time (inclusive) of the time range when the user task instance was created. Must be less or equal to the value of the \&#39;createdUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [createdUpTo] The end time (inclusive) of the time range when the user task instance was created. Must be greater or equal to the value of the \&#39;createdFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [claimedAt] Time when the user task instance was claimed. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;claimedFrom\&#39; and \&#39;claimedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [claimedFrom] The start time (inclusive) of the time range when the user task instance was claimed. Must be less or equal to the value of the \&#39;claimedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [claimedUpTo] The end time (inclusive) of the time range when the user task instance was claimed. Must be greater or equal to the value of the \&#39;claimedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [completedAt] Time when the user task instance was COMPLETED or CANCELED. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;completedFrom\&#39; and \&#39;completedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [completedFrom] The start time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be less or equal to the value of the \&#39;completedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [completedUpTo] The end time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be greater or equal to the value of the \&#39;completedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [lastChangedAt] Time when the user task instance has been changed for the last time. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;lastChangedFrom\&#39; and \&#39;lastChangedTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [lastChangedFrom] The start time (inclusive) of the time range when the user task instance was changed for the last time. Must be less or equal to the value of the \&#39;lastChangedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [lastChangedUpTo] The end time (inclusive) of the time range when the user task instance was changed for the last time. Must be greater or equal to the value of the \&#39;lastChangedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [dueDate] The due date of the user task instance. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;dueDateFrom\&#39; and \&#39;dueDateUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [dueDateFrom] The start time (inclusive) of the due date time range for the user task instance. Must be less or equal to the value of the \&#39;dueDateUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {string} [dueDateUpTo] The end time (inclusive) of the due date time range for the user task instance. Must be greater or equal to the \&#39;dueDateFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
         * @param {'LOW' | 'MEDIUM' | 'HIGH' | 'VERY_HIGH'} [priority] The priority of the user task instance. The values are case-insensitive. 
         * @param {'READY' | 'RESERVED' | 'COMPLETED' | 'CANCELED'} [status] The status of the user task instance. The values are case-insensitive. 
         * @param {string} [recipientUsers] The users who must be among the recipient users of the user task instance. A user task instance has to match at least one of the recipient users specified. Specify the users by repeating this parameter multiple times, with one user each.  
         * @param {string} [recipientGroups] The groups which must be among the recipient groups of the user task instance. A user task instance has to match at least one of the recipient groups specified. Specify the groups by repeating this parameter multiple times, with one user each.  
         * @param {string} [containsText] Text, which should be contained in at least one of the following fields of the user task instance:   * subject  * description  * activityId  * id  * processor  * workflowDefinitionId  * workflowInstanceId  Performed filtering is case-insensitive. You must not use this parameter more than once. 
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters task instances by the value of the custom task attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom task attributes with different IDs are present in the URL, only tasks which contain all of them with the values specified will be returned as a response to the request. If a query by custom task attributes matches too many task definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
         * @param {string} [definitionId] The definition ID of the user task. It consists of the ID of the task defined in the workflow definition (task definition ID) as well as the workflow definition ID delimited by an \&#39;@\&#39; sign. For optimal performance, specify this parameter when searching for tasks by custom task attributes. If the custom task attribute IDs from the query match more than 50 task definitions, you have to specify one or more task definition IDs when searching for tasks by custom task attributes. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesGet($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', $orderby?: 'claimedAt asc' | 'claimedAt desc' | 'completedAt asc' | 'completedAt desc' | 'createdAt asc' | 'createdAt desc' | 'lastChangedAt asc' | 'lastChangedAt desc' | 'dueDate asc' | 'dueDate desc' | 'subject asc' | 'subject desc' | 'description asc' | 'description desc' | 'activityId asc' | 'activityId desc' | 'id asc' | 'id desc' | 'processor asc' | 'processor desc' | 'workflowDefinitionId asc' | 'workflowDefinitionId desc' | 'workflowInstanceId asc' | 'workflowInstanceId desc' | 'priority asc' | 'priority desc', workflowInstanceId?: string, workflowDefinitionId?: string, processor?: string, id?: string, activityId?: string, description?: string, subject?: string, createdAt?: string, createdFrom?: string, createdUpTo?: string, claimedAt?: string, claimedFrom?: string, claimedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, lastChangedAt?: string, lastChangedFrom?: string, lastChangedUpTo?: string, dueDate?: string, dueDateFrom?: string, dueDateUpTo?: string, priority?: 'LOW' | 'MEDIUM' | 'HIGH' | 'VERY_HIGH', status?: 'READY' | 'RESERVED' | 'COMPLETED' | 'CANCELED', recipientUsers?: string, recipientGroups?: string, containsText?: string, attributesExampleCustomAttribute?: string, definitionId?: string, options?: any): AxiosPromise<Array<TaskInstance>> {
            return SapCpWorkflowCfApiFp(configuration).v1TaskInstancesGet($skip, $top, $inlinecount, $expand, $orderby, workflowInstanceId, workflowDefinitionId, processor, id, activityId, description, subject, createdAt, createdFrom, createdUpTo, claimedAt, claimedFrom, claimedUpTo, completedAt, completedFrom, completedUpTo, lastChangedAt, lastChangedFrom, lastChangedUpTo, dueDate, dueDateFrom, dueDateUpTo, priority, status, recipientUsers, recipientGroups, containsText, attributesExampleCustomAttribute, definitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the attachments information of a workflow instance via the given user task.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_ATTACHMENTS
         * @summary Retrieve task instance attachments
         * @param {string} taskInstanceId The ID of the user task via which the attachments information of the corresponding workflow instance should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesTaskInstanceIdAttachmentsGet(taskInstanceId: string, options?: any): AxiosPromise<AttachmentsContext> {
            return SapCpWorkflowCfApiFp(configuration).v1TaskInstancesTaskInstanceIdAttachmentsGet(taskInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves custom task attributes of a user task. Labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET_ATTRIBUTES 
         * @summary Retrieve custom task attributes by task instance ID
         * @param {string} taskInstanceId The ID of the user task instance for which the custom task attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesTaskInstanceIdAttributesGet(taskInstanceId: string, options?: any): AxiosPromise<Array<CustomAttribute>> {
            return SapCpWorkflowCfApiFp(configuration).v1TaskInstancesTaskInstanceIdAttributesGet(taskInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the task context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context of a user task.  Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_CONTEXT
         * @summary Retrieve task context by ID
         * @param {string} taskInstanceId The ID of the user task for which the context should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesTaskInstanceIdContextGet(taskInstanceId: string, options?: any): AxiosPromise<object> {
            return SapCpWorkflowCfApiFp(configuration).v1TaskInstancesTaskInstanceIdContextGet(taskInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the form metadata of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM 
         * @summary Retrieve form metadata of the given task instance.
         * @param {string} taskInstanceId The ID of the user task instance for which the form metadata should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesTaskInstanceIdFormGet(taskInstanceId: string, options?: any): AxiosPromise<FormMetadata> {
            return SapCpWorkflowCfApiFp(configuration).v1TaskInstancesTaskInstanceIdFormGet(taskInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the form model of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM_MODEL 
         * @summary Retrieve form model of the given task instance.
         * @param {string} taskInstanceId The ID of the user task instance for which the form model should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesTaskInstanceIdFormModelGet(taskInstanceId: string, options?: any): AxiosPromise<FormModel> {
            return SapCpWorkflowCfApiFp(configuration).v1TaskInstancesTaskInstanceIdFormModelGet(taskInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the user task instance with the specified task instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET
         * @summary Retrieve task by ID
         * @param {string} taskInstanceId The ID of the user task instance which should be retrieved. The ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesTaskInstanceIdGet(taskInstanceId: string, $expand?: 'attributes', options?: any): AxiosPromise<TaskInstance> {
            return SapCpWorkflowCfApiFp(configuration).v1TaskInstancesTaskInstanceIdGet(taskInstanceId, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates a user task\'s status, its properties (for example, subject), and its context with the attributes provided in the request body.    For more information, see SAP Cloud Platform Workflow Service documentation on the  [SAP Help Portal](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/fe41c54d61fa4710b34f2afe11b5d00e.html).  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: TASK_COMPLETE, TASK_UPDATE
         * @summary Update task by ID
         * @param {string} taskInstanceId The ID of the user task instance that is to be updated. The ID is 36 characters long.
         * @param {UpdateTaskInstancePayload} body Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1TaskInstancesTaskInstanceIdPatch(taskInstanceId: string, body: UpdateTaskInstancePayload, options?: any): AxiosPromise<void> {
            return SapCpWorkflowCfApiFp(configuration).v1TaskInstancesTaskInstanceIdPatch(taskInstanceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Undeploys all versions of an existing workflow definition and deletes the corresponding workflow instances. Once the undeployment has started, you can no longer start a new workflow instance based on this workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: WORKFLOW_DEFINITION_UNDEPLOY 
         * @summary Delete workflow definition
         * @param {string} definitionId The ID of the workflow definition to be undeployed. The ID is at most 64 characters long.
         * @param {boolean} [cascade] Whether the undeployment of the workflow definition deletes active workflow instances. If the parameter is false or not specified and there are active workflow instances for the specified workflow definition,  the undeployment is rejected. An instance is considered active if it is in status RUNNING, ERRONEOUS, or SUSPENDED. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdDelete(definitionId: string, cascade?: boolean, options?: any): AxiosPromise<void> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowDefinitionsDefinitionIdDelete(definitionId, cascade, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:   WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve workflow definition by ID
         * @param {string} definitionId The ID of the workflow definition for which the latest version should be retrieved. The ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdGet(definitionId: string, options?: any): AxiosPromise<WorkflowDefinition> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowDefinitionsDefinitionIdGet(definitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the model of the latest version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
         * @summary Retrieve workflow definition model by ID
         * @param {string} definitionId The workflow definition ID for which the latest model should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdModelGet(definitionId: string, options?: any): AxiosPromise<WorkflowModel> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowDefinitionsDefinitionIdModelGet(definitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the default start context of the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
         * @summary Retrieve sample start context of workflow definition by ID
         * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdSampleContextsDefaultStartContextGet(definitionId: string, options?: any): AxiosPromise<SampleContext> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowDefinitionsDefinitionIdSampleContextsDefaultStartContextGet(definitionId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of all deployed versions of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve all versions of workflow definition by ID
         * @param {string} definitionId The ID of the workflow definition for which all versions should be retrieved. The ID is at most 64 characters long.
         * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definition versions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdVersionsGet(definitionId: string, $orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options?: any): AxiosPromise<Array<WorkflowDefinitionVersion>> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowDefinitionsDefinitionIdVersionsGet(definitionId, $orderby, $skip, $top, $inlinecount, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve workflow definition by ID and version number
         * @param {string} definitionId The ID of the workflow definition which should be retrieved. The ID is at most 64 characters long.
         * @param {string} versionNumber The version number of the workflow definition that should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberGet(definitionId: string, versionNumber: string, options?: any): AxiosPromise<WorkflowDefinitionVersion> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberGet(definitionId, versionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the model of the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
         * @summary Retrieve workflow definition model by ID and version number
         * @param {string} definitionId The workflow definition ID for which the model should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberModelGet(definitionId: string, versionNumber: string, options?: any): AxiosPromise<WorkflowModel> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberModelGet(definitionId, versionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the default start context of the specified version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
         * @summary Retrieve sample start context of workflow definition by ID and version number
         * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
         * @param {string} versionNumber The version number for which the default start context should be retrieved. The version number consists of 1 - 10 digits.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberSampleContextsDefaultStartContextGet(definitionId: string, versionNumber: string, options?: any): AxiosPromise<SampleContext> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberSampleContextsDefaultStartContextGet(definitionId, versionNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves a list of the latest version of each deployed workflow definition. The request can be parameterized.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
         * @summary Retrieve all workflow definitions
         * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowDefinitionsGet($orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options?: any): AxiosPromise<Array<WorkflowDefinition>> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowDefinitionsGet($orderby, $skip, $top, $inlinecount, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves workflow instances by parameters. If no parameters are specified, all RUNNING, or ERRONEOUS instances are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If multiple parameters are specified for the same attribute or a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not given.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET 
         * @summary Retrieve all instances by query parameters
         * @param {'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc'} [$orderby] The attribute and direction by which workflow instances are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. If sort by definitionVersion is enabled, then definitionId is also added to the sorting query. If not specified, the results are sorted by the \&#39;startedAt\&#39; attribute, in descending order.   * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * definitionId asc - Ascending, from A to Z case-sensitive.  * definitionId desc - Descending, from Z to A case-sensitive.  * definitionVersion asc - Ascending, from A to Z case-sensitive.  * definitionVersion desc - Descending, from Z to A case-sensitive.  * startedAt asc - Ascending, from A to Z case-sensitive.  * startedAt desc - Descending, from Z to A case-sensitive.  * completedAt asc - Ascending, workflow instance completion or cancelation time from the oldest to the most recent, not yet COMPLETED workflow instances first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED workflow instance to the oldest ones, not yet COMPLETED workflow instances last.  * startedBy asc - Ascending, from A to Z case-sensitive.  * startedBy desc - Descending, from Z to A case-sensitive.  * subject asc - Ascending, from A to Z case-sensitive, workflow instances without subject first.  * subject desc - Descending, from Z to A case-sensitive, workflow instances without subject last.  * businessKey asc - Ascending, from A to Z case-sensitive, workflow instances without business key first.  * businessKey desc - Descending, from Z to A case-sensitive, workflow instances without business key last.
         * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
         * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
         * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow instances, which match the search criteria, should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. 
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {string} [id] Specify the workflow instance ID. The workflow instance ID is 36 characters long.
         * @param {string} [definitionId] Specify the ID of the workflow definition. The ID is at most 64 characters long.
         * @param {string} [definitionVersion] Specify the version of the workflow definition.
         * @param {'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED'} [status] Specify the status of the workflow instance. The values are not case-sensitive.
         * @param {string} [startedAt] Specify at what time the workflow instance was started. Supports two date formats 1) yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2) yyyyMMddHHmmss.SSS.
         * @param {string} [startedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedAt] Specify at what time the workflow instance was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS 
         * @param {string} [completedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [completedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
         * @param {string} [startedBy] Specify the user who started the workflow instance, in UTF-8 encoding. The user ID is at most 255 characters long.
         * @param {string} [subject] Specify the subject of the workflow instance, in UTF-8 encoding. The subject of a workflow instance is limited to 255 characters.
         * @param {string} [containsText] Specify the text to search for, in UTF-8 encoding. Searches the id, definitionId, subject, startedBy, and businessKey attributes of the workflow instances. The maximum length of these attributes is 255 characters. 
         * @param {string} [businessKey] Specify the business key of the workflow instance, in UTF-8 encoding. The business key of a workflow instance is limited to 255 characters.
         * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters workflow instances by the value of the custom workflow attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom workflow attributes with different IDs are present in the URL, only workflow instances which contain all of them with the values specified will be returned as a response to the request. If a query by custom workflow attributes matches too many workflow definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesGet($orderby?: 'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', id?: string, definitionId?: string, definitionVersion?: string, status?: 'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED', startedAt?: string, startedFrom?: string, startedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, startedBy?: string, subject?: string, containsText?: string, businessKey?: string, attributesExampleCustomAttribute?: string, options?: any): AxiosPromise<Array<WorkflowInstance>> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesGet($orderby, $skip, $top, $inlinecount, $expand, id, definitionId, definitionVersion, status, startedAt, startedFrom, startedUpTo, completedAt, completedFrom, completedUpTo, startedBy, subject, containsText, businessKey, attributesExampleCustomAttribute, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the given workflow instances according to the specified operations. Currently, the only operation supported is the deletion of workflow instances. You can at most specify 10000 instances to delete in one API call.  Roles permitted to execute this operation: - Global roles: WorkflowTenantOperator - Scope: WORKFLOW_INSTANCES_UPDATE
         * @summary Delete instance by ID
         * @param {Array<WorkflowInstancesUpdatePayload>} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesPatch(body: Array<WorkflowInstancesUpdatePayload>, options?: any): AxiosPromise<void> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesPatch(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Starts a new workflow instance of the provided workflow definition. Specify the ID of the workflow definition in the body. The workflow instance automatically starts based on the latest deployed version of the definition.  Roles permitted to execute this operation:  - Global roles: WorkflowInitiator  - Scope: WORKFLOW_INSTANCE_START 
         * @summary Start a new instance
         * @param {WorkflowInstanceStartPayload} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesPost(body: WorkflowInstanceStartPayload, options?: any): AxiosPromise<WorkflowInstance> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesPost(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the attachments information for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ATTACHMENTS
         * @summary Retrieve instance attachments
         * @param {string} workflowInstanceId The workflow instance ID for which the attachments should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet(workflowInstanceId: string, options?: any): AxiosPromise<AttachmentsContext> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Overrides the attachments information for a workflow instance independent of its status.  Take special care when using this API, because it will override the workflow attachments, that is, it might change the workflow   in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ATTACHMENTS
         * @summary Overwrite instance attachments
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the attachments should be overridden. The workflow instance ID is 36 characters long.
         * @param {AttachmentsContext} body Specify the new information according to the given schema.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut(workflowInstanceId: string, body: AttachmentsContext, options?: any): AxiosPromise<void> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut(workflowInstanceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves custom workflow attributes for a workflow instance. Labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: WORKFLOW_INSTANCE_GET_ATTRIBUTES 
         * @summary Retrieve custom workflow attributes by workflow instance ID
         * @param {string} workflowInstanceId The ID of the workflow instance for which the custom workflow attributes should be retrieved. The ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdAttributesGet(workflowInstanceId: string, options?: any): AxiosPromise<Array<CustomAttribute>> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdAttributesGet(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the workflow context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_CONTEXT
         * @summary Retrieve instance context
         * @param {string} workflowInstanceId The workflow instance ID for which the context should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdContextGet(workflowInstanceId: string, options?: any): AxiosPromise<object> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdContextGet(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies parts of the context for a workflow instance independent of its status.  Take special care when using this API, because it might change the workflow context in ways that are incompatible with the expectations  of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and make sure that  the execution has come to a halt, that is, that no further steps are being added to the execution log. Refer to PATCH on the parent resource  and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Update instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be modified. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the modified parts of the context. Note that the modification is limited by the allowed content length of the request body. The length is restricted to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdContextPatch(workflowInstanceId: string, body: object, options?: any): AxiosPromise<void> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdContextPatch(workflowInstanceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Overrides the context for a workflow instance independent of its status.   Take special care when using this API, because it will override the workflow context, that is, it might change the workflow context  in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.  Refer to PATCH on the parent resource and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
         * @summary Overwrite instance context
         * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be overridden. The workflow instance ID is 36 characters long.
         * @param {object} body Specify the new context according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdContextPut(workflowInstanceId: string, body: object, options?: any): AxiosPromise<void> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdContextPut(workflowInstanceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves current error messages for a workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowDeveloper, WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ERROR_MESSAGES 
         * @summary Retrieve error messages
         * @param {string} workflowInstanceId The workflow instance ID for which the error messages should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet(workflowInstanceId: string, options?: any): AxiosPromise<Array<WorkflowInstanceErrorMessage>> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves execution logs for a given workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_EXECUTION_LOGS 
         * @summary Retrieve execution logs
         * @param {string} workflowInstanceId The workflow instance ID for which the execution logs should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet(workflowInstanceId: string, options?: any): AxiosPromise<Array<WorkflowInstanceExecutionLog>> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the workflow instance with the specified workflow instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET
         * @summary Retrieve workflow instance by ID
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be retrieved. The workflow instance ID is 36 characters long.
         * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdGet(workflowInstanceId: string, $expand?: 'attributes', options?: any): AxiosPromise<WorkflowInstance> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdGet(workflowInstanceId, $expand, options).then((request) => request(axios, basePath));
        },
        /**
         * Modifies the properties of a given workflow instance, for example, sets its status to CANCELED or RUNNING.  Status change effects may not take effect immediately, due to asynchronous processing of the request. When you change the status to CANCELED, note the following:  * Workflow instances in CANCELED status are considered final, that is, no further changes are allowed. This is valid as well for other APIs and the processing according to the workflow definition.  * Workflow instances in CANCELED status stop processing as soon as the system allows.  When you are changing the status to SUSPENDED, note the following:  * Status SUSPENDED manually and temporarily suspends processing.  * Workflow instances in SUSPENDED status stop processing as soon as the system allows.  * Workflow instances remain in SUSPENDED status until a status change to RUNNING or CANCELED is requested.  * While the workflow instance status reported by the respective API might change with immediate effect, follow-up actions might only be successful, after asynchronous processing within the workflow instance actually has stopped. To check whether asynchronous processing is ongoing, analyze the execution logs or check the workflow definition structure.  When you are changing the status to RUNNING, note the following:  * For workflow instances in ERRONEOUS status, this retries the failed activities. If these activities continue failing, the workflow instance automatically moves again into ERRONEOUS status.  * If the workflow instance had previously been suspended while in ERRONEOUS status, failed activities, such as service tasks, are retried.   Roles permitted to execute this operation:  - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: WORKFLOW_INSTANCE_CANCEL, WORKFLOW_INSTANCE_RETRY_RESUME, WORKFLOW_INSTANCE_SUSPEND
         * @summary Update instance
         * @param {string} workflowInstanceId The ID of the workflow instance, which should be modified. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceUpdatePayload} body 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdPatch(workflowInstanceId: string, body: WorkflowInstanceUpdatePayload, options?: any): AxiosPromise<void> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdPatch(workflowInstanceId, body, options).then((request) => request(axios, basePath));
        },
        /**
         * Retrieves the instance-specific role assignments of the given workflow instance.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ROLES 
         * @summary Retrieve instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the roles should be retrieved. The workflow instance ID is 36 characters long.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdRolesGet(workflowInstanceId: string, options?: any): AxiosPromise<WorkflowInstanceRoles> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdRolesGet(workflowInstanceId, options).then((request) => request(axios, basePath));
        },
        /**
         * Updates the instance-specific role assignments of the given workflow instance.  Any of the role assignment properties that is present in the request body will overwrite the existing assignments with the new assignments. Any properties that are either null or not present at all in the request body will leave the corresponding role assignments unchanged.  The maximum number of users and groups that can be assigned to each role is limited to 100.  The use of expressions as part of the role assignments (e.g. ${context.variable}) is only allowed for workflow instances that are not yet COMPLETED or CANCELED.  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ROLES  Examples: - Setting **viewerUsers: \"UserId1, UserId8\"** will remove all existing user assignments of the viewer role and then assign   only the two specified users to the role. - Setting **viewerUsers: \"\"** will remove all existing user assignments of the viewer role. - Specifying any non-null **viewerUsers** in the request body and leaving out **viewerGroups** will update the user   assignments and leave the group assignments unchanged.
         * @summary Update instance roles
         * @param {string} workflowInstanceId The workflow instance ID for which the role assignments should be updated. The workflow instance ID is 36 characters long.
         * @param {WorkflowInstanceRolesUpdatePayload} body Specify new role assignments.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1WorkflowInstancesWorkflowInstanceIdRolesPatch(workflowInstanceId: string, body: WorkflowInstanceRolesUpdatePayload, options?: any): AxiosPromise<void> {
            return SapCpWorkflowCfApiFp(configuration).v1WorkflowInstancesWorkflowInstanceIdRolesPatch(workflowInstanceId, body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SapCpWorkflowCfApi - object-oriented interface
 * @export
 * @class SapCpWorkflowCfApi
 * @extends {BaseAPI}
 */
export class SapCpWorkflowCfApi extends BaseAPI {
    /**
     * Requests the export of workflow definitions metadata, form definitions metadata, workflow instances, and task instances. The file and data structures used are subject to change.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: DATA_EXPORT 
     * @summary Data Export
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1ExportGet(options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1ExportGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Undeploys all versions of an existing form.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: FORM_DEFINITION_UNDEPLOY 
     * @summary Delete a form.
     * @param {string} formId The ID of the form you want to undeploy. The ID is at most 255 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1FormsFormIdDelete(formId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1FormsFormIdDelete(formId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the form model with the specified form ID and revision.  Roles permitted to execute this operation:  - Global roles (retrieve start and task forms): WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Global roles (retrieve start forms only): WorkflowInitiator  - Scope: FORM_DEFINITION_GET_MODEL 
     * @summary Retrieve form model by ID and revision.
     * @param {string} formId The ID of the form for which the model should be retrieved.
     * @param {string} revisionId The revision of the form for which the model should be retrieved.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1FormsFormIdRevisionsRevisionIdModelGet(formId: string, revisionId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1FormsFormIdRevisionsRevisionIdModelGet(formId, revisionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the model of the specified version of the specified form definition.    Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin, WorkflowDeveloper   - Scope: FORM_DEFINITION_GET_MODEL 
     * @summary Retrieve form model by ID and version number.
     * @param {string} formId The form ID for which the model should be retrieved. The form definition ID is at most 255 characters long.
     * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1FormsFormIdVersionsVersionNumberModelGet(formId: string, versionNumber: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1FormsFormIdVersionsVersionNumberModelGet(formId, versionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of the latest version of each revision of each deployed form definition. The request can be parameterized.  The results are sorted by the \'createdAt\' attribute in descending order.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: FORM_DEFINITION_GET 
     * @summary Retrieve all form definitions
     * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
     * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
     * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the form definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
     * @param {'start' | 'task'} [type] Specify whether the response should be filtered by the form type. The values are case-sensitive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1FormsGet($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', type?: 'start' | 'task', options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1FormsGet($skip, $top, $inlinecount, type, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Tracks the status of API requests, which the server executed asynchronously.          Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: JOB_STATUS_GET 
     * @summary Retrieve Job status
     * @param {string} jobId The ID of the job for which you check the status. Typically, the ID has been retrieved from another API request that was processed asynchronously. The ID is at most 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1JobsJobIdGet(jobId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1JobsJobIdGet(jobId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Sends a message to a set of workflow instances for consumption in intermediate message events. The message is identified by the name specified in the workflow model (request body parameter \'definitionId\')  and parameters identifying the workflow instances that should consume the message.   The message is consumed by the workflow instances that match the following criteria:  * The instance can be a specific match when using its workflow instance ID (request body parameter \'workflowInstanceId\').  Or the instance is a generic match when using the ID of the workflow model together with the business key (request body parameters \'workflowDefinitionId\' respectively \'businessKey\'). You can either use the specific or generic match but not both in the same call.  * The workflow instance is not in the SUSPENDED state.  * The workflow instance currently waits at the intermediate message event referring to the specified message.  The business key of a workflow instance matches if the business key specified in the request body is the same.    Roles permitted to execute this operation:  - Global roles:  WorkflowMessageSender  - Scope: MESSAGE_SEND
     * @summary Send message
     * @param {SendMessagePayload} body Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1MessagesPost(body: SendMessagePayload, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1MessagesPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Completely erases all workflow definitions, all workflow instances, and all form definitions.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: DATA_PURGE 
     * @summary Purge instances and definitions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1PurgePost(options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1PurgePost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves task definitions by query parameters.   A task definition is identified by the ID of the respective activity within a workflow definition (for example, usertask1) and the workflow definition ID.  The workflow definition ID is version independent. That means, this API assumes that task definitions are semantically the same if they span several  workflow versions and therefore have the same identifier. The latest workflow definition version is expected to contain the leading property values of the task definition.  At the moment, filtering is limited to the $skip and $top parameters for paging through the available task definitions.  The returned task definitions are sorted in descending order of their creation time.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin
     * @summary Retrieve definitions by query parameters
     * @param {number} [$skip] The number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. You can use this parameter only once. Refer also to the $top parameter.
     * @param {number} [$top] The number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. You can use this parameter only once. Refer also to the $skip parameter.
     * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the task definitions should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. You can use this parameter only once.
     * @param {'attributeDefinitions'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributeDefinitions\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributeDefinitions\&#39; field is not included into the output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where the corresponding task definition exists.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1TaskDefinitionsGet($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributeDefinitions', options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1TaskDefinitionsGet($skip, $top, $inlinecount, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves user task instances by parameters. If no parameters are specified, all instances with status READY, RESERVED, CANCELED, or COMPLETED are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not specified. By default, returned tasks are sorted by creation time in ascending order.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET
     * @summary Retrieve instances by query parameters
     * @param {number} [$skip] The number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. You can use this parameter only once. Refer also to the $top parameter.
     * @param {number} [$top] The number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. You can use this parameter only once. Refer also to the $skip parameter.
     * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the task instances, which match the search criteria, should be returned as a value  of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. You can use this parameter only once.
     * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
     * @param {'claimedAt asc' | 'claimedAt desc' | 'completedAt asc' | 'completedAt desc' | 'createdAt asc' | 'createdAt desc' | 'lastChangedAt asc' | 'lastChangedAt desc' | 'dueDate asc' | 'dueDate desc' | 'subject asc' | 'subject desc' | 'description asc' | 'description desc' | 'activityId asc' | 'activityId desc' | 'id asc' | 'id desc' | 'processor asc' | 'processor desc' | 'workflowDefinitionId asc' | 'workflowDefinitionId desc' | 'workflowInstanceId asc' | 'workflowInstanceId desc' | 'priority asc' | 'priority desc'} [$orderby] The attribute and direction by which tasks are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. To stabilize the order of tasks the implicit second ordering parameter \&#39;createdAt asc\&#39; is applied.   * claimedAt asc - Ascending, task claim time from the oldest to the most recent, tasks with status READY (not yet claimed) first.  * claimedAt desc - Descending, from the most recently claimed tasks to the oldest ones, tasks with status READY (not yet claimed) last.  * completedAt asc - Ascending, task completion or cancelation time from the oldest to the most recent, not yet COMPLETED tasks first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED tasks to the oldest ones, not yet COMPLETED tasks last.  * createdAt asc - Ascending, task creation time from the oldest to the most recent.  * createdAt desc - Descending, from the most recently created tasks to the oldest ones.  * lastChangedAt asc - Ascending, task last change time from the oldest to the most recent.  * lastChangedAt desc - Descending, from the most recently changed tasks to the oldest ones.               * dueDate asc - Ascending, tasks due date from the oldest to the most distant in future ones, tasks without due date first.  * dueDate desc - Descending, tasks due date from the most distant in future to the oldest ones, tasks without due date last.  * subject asc - Ascending, from A to Z case-sensitive.  * subject desc - Descending, from Z to A case-sensitive.  * description asc - Ascending, from A to Z case-sensitive, tasks without description first.  * description desc - Descending, from Z to A case-sensitive, tasks without description last.  * activityId asc - Ascending, from A to Z case-sensitive.  * activityId desc - Descending, from Z to A case-sensitive.  * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * processor asc - Ascending, from A to Z case-sensitive, tasks without processor first.  * processor desc - Descending, from Z to A case-sensitive, tasks without processor last.  * workflowDefinitionId asc - Ascending, from A to Z case-sensitive.  * workflowDefinitionId desc - Descending, from Z to A case-sensitive.  * workflowInstanceId asc - Ascending, from A to Z case-sensitive.  * workflowInstanceId desc - Descending, from Z to A case-sensitive.  * priority asc - Ascending, tasks priority from lowest to highest.  * priority desc - Descending, tasks priority from highest to lowest.
     * @param {string} [workflowInstanceId] The workflow instance ID for which the user task instances are returned. The workflow instance ID is 36 characters long.
     * @param {string} [workflowDefinitionId] The workflow definition ID for which the user task instances are returned.
     * @param {string} [processor] The processor of the user task instance.
     * @param {string} [id] The unique ID of the user task instance. The user task instance ID is 36 characters long.
     * @param {string} [activityId] The activityId of the user task instance. This field represents the ID of the user task definition.
     * @param {string} [description] The description of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
     * @param {string} [subject] The subject of the user task instance in UTF-8 encoding. You must not specify texts that contain commas with this parameter.
     * @param {string} [createdAt] Time when the user task instance has been created. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;createdFrom\&#39; and \&#39;createdUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {string} [createdFrom] The start time (inclusive) of the time range when the user task instance was created. Must be less or equal to the value of the \&#39;createdUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {string} [createdUpTo] The end time (inclusive) of the time range when the user task instance was created. Must be greater or equal to the value of the \&#39;createdFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;createdAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {string} [claimedAt] Time when the user task instance was claimed. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;claimedFrom\&#39; and \&#39;claimedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {string} [claimedFrom] The start time (inclusive) of the time range when the user task instance was claimed. Must be less or equal to the value of the \&#39;claimedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {string} [claimedUpTo] The end time (inclusive) of the time range when the user task instance was claimed. Must be greater or equal to the value of the \&#39;claimedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;claimedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {string} [completedAt] Time when the user task instance was COMPLETED or CANCELED. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;completedFrom\&#39; and \&#39;completedUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {string} [completedFrom] The start time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be less or equal to the value of the \&#39;completedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {string} [completedUpTo] The end time (inclusive) of the time range when the user task instance was COMPLETED or CANCELED. Must be greater or equal to the value of the \&#39;completedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;completedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {string} [lastChangedAt] Time when the user task instance has been changed for the last time. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;lastChangedFrom\&#39; and \&#39;lastChangedTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {string} [lastChangedFrom] The start time (inclusive) of the time range when the user task instance was changed for the last time. Must be less or equal to the value of the \&#39;lastChangedUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {string} [lastChangedUpTo] The end time (inclusive) of the time range when the user task instance was changed for the last time. Must be greater or equal to the value of the \&#39;lastChangedFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;lastChangedAt\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {string} [dueDate] The due date of the user task instance. Evaluated using the logical \&#39;or\&#39; operator with the values of the \&#39;dueDateFrom\&#39; and \&#39;dueDateUpTo\&#39; parameters if they are specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {string} [dueDateFrom] The start time (inclusive) of the due date time range for the user task instance. Must be less or equal to the value of the \&#39;dueDateUpTo\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {string} [dueDateUpTo] The end time (inclusive) of the due date time range for the user task instance. Must be greater or equal to the \&#39;dueDateFrom\&#39; parameter if the latter is specified. Evaluated using the logical \&#39;or\&#39; operator with the value of the \&#39;dueDate\&#39; parameter if the latter is specified.  Supports two date formats: 1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2. yyyyMMddHHmmss.SSS 
     * @param {'LOW' | 'MEDIUM' | 'HIGH' | 'VERY_HIGH'} [priority] The priority of the user task instance. The values are case-insensitive. 
     * @param {'READY' | 'RESERVED' | 'COMPLETED' | 'CANCELED'} [status] The status of the user task instance. The values are case-insensitive. 
     * @param {string} [recipientUsers] The users who must be among the recipient users of the user task instance. A user task instance has to match at least one of the recipient users specified. Specify the users by repeating this parameter multiple times, with one user each.  
     * @param {string} [recipientGroups] The groups which must be among the recipient groups of the user task instance. A user task instance has to match at least one of the recipient groups specified. Specify the groups by repeating this parameter multiple times, with one user each.  
     * @param {string} [containsText] Text, which should be contained in at least one of the following fields of the user task instance:   * subject  * description  * activityId  * id  * processor  * workflowDefinitionId  * workflowInstanceId  Performed filtering is case-insensitive. You must not use this parameter more than once. 
     * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters task instances by the value of the custom task attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom task attributes with different IDs are present in the URL, only tasks which contain all of them with the values specified will be returned as a response to the request. If a query by custom task attributes matches too many task definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
     * @param {string} [definitionId] The definition ID of the user task. It consists of the ID of the task defined in the workflow definition (task definition ID) as well as the workflow definition ID delimited by an \&#39;@\&#39; sign. For optimal performance, specify this parameter when searching for tasks by custom task attributes. If the custom task attribute IDs from the query match more than 50 task definitions, you have to specify one or more task definition IDs when searching for tasks by custom task attributes. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1TaskInstancesGet($skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', $orderby?: 'claimedAt asc' | 'claimedAt desc' | 'completedAt asc' | 'completedAt desc' | 'createdAt asc' | 'createdAt desc' | 'lastChangedAt asc' | 'lastChangedAt desc' | 'dueDate asc' | 'dueDate desc' | 'subject asc' | 'subject desc' | 'description asc' | 'description desc' | 'activityId asc' | 'activityId desc' | 'id asc' | 'id desc' | 'processor asc' | 'processor desc' | 'workflowDefinitionId asc' | 'workflowDefinitionId desc' | 'workflowInstanceId asc' | 'workflowInstanceId desc' | 'priority asc' | 'priority desc', workflowInstanceId?: string, workflowDefinitionId?: string, processor?: string, id?: string, activityId?: string, description?: string, subject?: string, createdAt?: string, createdFrom?: string, createdUpTo?: string, claimedAt?: string, claimedFrom?: string, claimedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, lastChangedAt?: string, lastChangedFrom?: string, lastChangedUpTo?: string, dueDate?: string, dueDateFrom?: string, dueDateUpTo?: string, priority?: 'LOW' | 'MEDIUM' | 'HIGH' | 'VERY_HIGH', status?: 'READY' | 'RESERVED' | 'COMPLETED' | 'CANCELED', recipientUsers?: string, recipientGroups?: string, containsText?: string, attributesExampleCustomAttribute?: string, definitionId?: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1TaskInstancesGet($skip, $top, $inlinecount, $expand, $orderby, workflowInstanceId, workflowDefinitionId, processor, id, activityId, description, subject, createdAt, createdFrom, createdUpTo, claimedAt, claimedFrom, claimedUpTo, completedAt, completedFrom, completedUpTo, lastChangedAt, lastChangedFrom, lastChangedUpTo, dueDate, dueDateFrom, dueDateUpTo, priority, status, recipientUsers, recipientGroups, containsText, attributesExampleCustomAttribute, definitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the attachments information of a workflow instance via the given user task.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_ATTACHMENTS
     * @summary Retrieve task instance attachments
     * @param {string} taskInstanceId The ID of the user task via which the attachments information of the corresponding workflow instance should be retrieved. The ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1TaskInstancesTaskInstanceIdAttachmentsGet(taskInstanceId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1TaskInstancesTaskInstanceIdAttachmentsGet(taskInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves custom task attributes of a user task. Labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET_ATTRIBUTES 
     * @summary Retrieve custom task attributes by task instance ID
     * @param {string} taskInstanceId The ID of the user task instance for which the custom task attributes should be retrieved. The ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1TaskInstancesTaskInstanceIdAttributesGet(taskInstanceId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1TaskInstancesTaskInstanceIdAttributesGet(taskInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the task context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context of a user task.  Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: TASK_GET_CONTEXT
     * @summary Retrieve task context by ID
     * @param {string} taskInstanceId The ID of the user task for which the context should be retrieved. The ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1TaskInstancesTaskInstanceIdContextGet(taskInstanceId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1TaskInstancesTaskInstanceIdContextGet(taskInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the form metadata of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM 
     * @summary Retrieve form metadata of the given task instance.
     * @param {string} taskInstanceId The ID of the user task instance for which the form metadata should be retrieved. The ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1TaskInstancesTaskInstanceIdFormGet(taskInstanceId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1TaskInstancesTaskInstanceIdFormGet(taskInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the form model of the given task instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin   - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]   - Scope: TASK_GET_FORM_MODEL 
     * @summary Retrieve form model of the given task instance.
     * @param {string} taskInstanceId The ID of the user task instance for which the form model should be retrieved. The ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1TaskInstancesTaskInstanceIdFormModelGet(taskInstanceId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1TaskInstancesTaskInstanceIdFormModelGet(taskInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the user task instance with the specified task instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: TASK_GET
     * @summary Retrieve task by ID
     * @param {string} taskInstanceId The ID of the user task instance which should be retrieved. The ID is 36 characters long.
     * @param {'attributes'} [$expand] You can request custom task attributes to become part of the task output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into task output. Note that labels as well as the order of the custom task attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1TaskInstancesTaskInstanceIdGet(taskInstanceId: string, $expand?: 'attributes', options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1TaskInstancesTaskInstanceIdGet(taskInstanceId, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates a user task\'s status, its properties (for example, subject), and its context with the attributes provided in the request body.    For more information, see SAP Cloud Platform Workflow Service documentation on the  [SAP Help Portal](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/fe41c54d61fa4710b34f2afe11b5d00e.html).  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Task-specific roles: recipientUsers, recipientGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: TASK_COMPLETE, TASK_UPDATE
     * @summary Update task by ID
     * @param {string} taskInstanceId The ID of the user task instance that is to be updated. The ID is 36 characters long.
     * @param {UpdateTaskInstancePayload} body Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1TaskInstancesTaskInstanceIdPatch(taskInstanceId: string, body: UpdateTaskInstancePayload, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1TaskInstancesTaskInstanceIdPatch(taskInstanceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Undeploys all versions of an existing workflow definition and deletes the corresponding workflow instances. Once the undeployment has started, you can no longer start a new workflow instance based on this workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowTenantOperator  - Scope: WORKFLOW_DEFINITION_UNDEPLOY 
     * @summary Delete workflow definition
     * @param {string} definitionId The ID of the workflow definition to be undeployed. The ID is at most 64 characters long.
     * @param {boolean} [cascade] Whether the undeployment of the workflow definition deletes active workflow instances. If the parameter is false or not specified and there are active workflow instances for the specified workflow definition,  the undeployment is rejected. An instance is considered active if it is in status RUNNING, ERRONEOUS, or SUSPENDED. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowDefinitionsDefinitionIdDelete(definitionId: string, cascade?: boolean, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowDefinitionsDefinitionIdDelete(definitionId, cascade, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:   WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
     * @summary Retrieve workflow definition by ID
     * @param {string} definitionId The ID of the workflow definition for which the latest version should be retrieved. The ID is at most 64 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowDefinitionsDefinitionIdGet(definitionId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowDefinitionsDefinitionIdGet(definitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the model of the latest version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
     * @summary Retrieve workflow definition model by ID
     * @param {string} definitionId The workflow definition ID for which the latest model should be retrieved. The workflow definition ID is at most 64 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowDefinitionsDefinitionIdModelGet(definitionId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowDefinitionsDefinitionIdModelGet(definitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the default start context of the latest version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
     * @summary Retrieve sample start context of workflow definition by ID
     * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowDefinitionsDefinitionIdSampleContextsDefaultStartContextGet(definitionId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowDefinitionsDefinitionIdSampleContextsDefaultStartContextGet(definitionId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of all deployed versions of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
     * @summary Retrieve all versions of workflow definition by ID
     * @param {string} definitionId The ID of the workflow definition for which all versions should be retrieved. The ID is at most 64 characters long.
     * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
     * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
     * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
     * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definition versions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowDefinitionsDefinitionIdVersionsGet(definitionId: string, $orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowDefinitionsDefinitionIdVersionsGet(definitionId, $orderby, $skip, $top, $inlinecount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
     * @summary Retrieve workflow definition by ID and version number
     * @param {string} definitionId The ID of the workflow definition which should be retrieved. The ID is at most 64 characters long.
     * @param {string} versionNumber The version number of the workflow definition that should be retrieved. The version number consists of 1 - 10 digits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberGet(definitionId: string, versionNumber: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberGet(definitionId, versionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the model of the specified version of the specified workflow definition.   Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET_MODEL 
     * @summary Retrieve workflow definition model by ID and version number
     * @param {string} definitionId The workflow definition ID for which the model should be retrieved. The workflow definition ID is at most 64 characters long.
     * @param {string} versionNumber The version number for which the model should be retrieved. The version number consists of 1 - 10 digits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberModelGet(definitionId: string, versionNumber: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberModelGet(definitionId, versionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the default start context of the specified version of the specified workflow definition.  Roles permitted to execute this operation:  - Global roles:  WorkflowInitiator  - Scope: WORKFLOW_DEFINITION_GET_SAMPLE_CONTEXT 
     * @summary Retrieve sample start context of workflow definition by ID and version number
     * @param {string} definitionId The workflow definition ID for which the default start context should be retrieved. The workflow definition ID is at most 64 characters long.
     * @param {string} versionNumber The version number for which the default start context should be retrieved. The version number consists of 1 - 10 digits.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberSampleContextsDefaultStartContextGet(definitionId: string, versionNumber: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowDefinitionsDefinitionIdVersionsVersionNumberSampleContextsDefaultStartContextGet(definitionId, versionNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves a list of the latest version of each deployed workflow definition. The request can be parameterized.  Roles permitted to execute this operation:  - Global roles:  WorkflowViewer, WorkflowAdmin, WorkflowDeveloper  - Scope: WORKFLOW_DEFINITION_GET 
     * @summary Retrieve all workflow definitions
     * @param {'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc'} [$orderby] Specify the attribute you want to sort by and the order separated by a space. If the order is omitted it is ascending by default. If not specified, the results are sorted by the \&#39;createdAt\&#39; attribute in descending order.
     * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
     * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
     * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow definitions should be returned as the value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowDefinitionsGet($orderby?: 'id' | 'id asc' | 'id desc' | 'version' | 'version asc' | 'version desc' | 'name' | 'name asc' | 'name desc' | 'createdAt' | 'createdAt asc' | 'createdAt desc' | 'createdBy' | 'createdBy asc' | 'createdBy desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowDefinitionsGet($orderby, $skip, $top, $inlinecount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves workflow instances by parameters. If no parameters are specified, all RUNNING, or ERRONEOUS instances are returned. Parameters for different attributes of the instance are evaluated using the logical \'and\' operator. If multiple parameters are specified for the same attribute or a parameter is specified multiple times, results are matched using the logical \'or\' operator, unless noted otherwise. Empty parameters are treated as if they were not given.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET 
     * @summary Retrieve all instances by query parameters
     * @param {'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc'} [$orderby] The attribute and direction by which workflow instances are sorted. The sort attribute and direction are separated by a space. The parameter value is case-sensitive. You can only specify one ordering parameter, which contains attribute and direction. If sort by definitionVersion is enabled, then definitionId is also added to the sorting query. If not specified, the results are sorted by the \&#39;startedAt\&#39; attribute, in descending order.   * id asc - Ascending, from A to Z case-sensitive.  * id desc - Descending, from Z to A case-sensitive.  * definitionId asc - Ascending, from A to Z case-sensitive.  * definitionId desc - Descending, from Z to A case-sensitive.  * definitionVersion asc - Ascending, from A to Z case-sensitive.  * definitionVersion desc - Descending, from Z to A case-sensitive.  * startedAt asc - Ascending, from A to Z case-sensitive.  * startedAt desc - Descending, from Z to A case-sensitive.  * completedAt asc - Ascending, workflow instance completion or cancelation time from the oldest to the most recent, not yet COMPLETED workflow instances first.  * completedAt desc - Descending, from the most recently COMPLETED or CANCELED workflow instance to the oldest ones, not yet COMPLETED workflow instances last.  * startedBy asc - Ascending, from A to Z case-sensitive.  * startedBy desc - Descending, from Z to A case-sensitive.  * subject asc - Ascending, from A to Z case-sensitive, workflow instances without subject first.  * subject desc - Descending, from Z to A case-sensitive, workflow instances without subject last.  * businessKey asc - Ascending, from A to Z case-sensitive, workflow instances without business key first.  * businessKey desc - Descending, from Z to A case-sensitive, workflow instances without business key last.
     * @param {number} [$skip] Specify the number of records you want to skip from the beginning. You can skip at most 4000 records. To indicate a result range that starts, for example, at 1001, combine the $skip with the $top parameter. If not specified, no records are skipped. Refer also to the $top parameter.
     * @param {number} [$top] Specify the number of records you want to show. You can get at most 1000 records per API call. To indicate a result range that starts, for example, at 1001, combine the $top with the $skip parameter. If not specified, 100 records are returned. Refer also to the $skip parameter.
     * @param {'allpages' | 'none'} [$inlinecount] Specify whether the total count of the workflow instances, which match the search criteria, should be returned as a value of the X-Total-Count response header. To enable the header, use the \&#39;allpages\&#39; setting. To disable the header, use the \&#39;none\&#39; setting. The values are case-sensitive. 
     * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
     * @param {string} [id] Specify the workflow instance ID. The workflow instance ID is 36 characters long.
     * @param {string} [definitionId] Specify the ID of the workflow definition. The ID is at most 64 characters long.
     * @param {string} [definitionVersion] Specify the version of the workflow definition.
     * @param {'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED'} [status] Specify the status of the workflow instance. The values are not case-sensitive.
     * @param {string} [startedAt] Specify at what time the workflow instance was started. Supports two date formats 1) yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 2) yyyyMMddHHmmss.SSS.
     * @param {string} [startedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
     * @param {string} [startedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was started.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;startedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;startedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;startedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
     * @param {string} [completedAt] Specify at what time the workflow instance was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS 
     * @param {string} [completedFrom] Specify the beginning (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedUpTo\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
     * @param {string} [completedUpTo] Specify the end (inclusive) of the time range during which a returned workflow was changed to status COMPLETED or CANCELED.  Supports two date formats:  1. yyyy-MM-dd\&#39;T\&#39;HH:mm:ss.SSS\&#39;Z\&#39; 1. yyyyMMddHHmmss.SSS  The parameter operates on the \&#39;completedAt\&#39; attribute of a workflow instance. It is combined with the following parameters, if available: \&#39;completedFrom\&#39; parameter using the logical \&#39;and\&#39; operator; \&#39;completedAt\&#39; parameter using the logical \&#39;or\&#39; operator. 
     * @param {string} [startedBy] Specify the user who started the workflow instance, in UTF-8 encoding. The user ID is at most 255 characters long.
     * @param {string} [subject] Specify the subject of the workflow instance, in UTF-8 encoding. The subject of a workflow instance is limited to 255 characters.
     * @param {string} [containsText] Specify the text to search for, in UTF-8 encoding. Searches the id, definitionId, subject, startedBy, and businessKey attributes of the workflow instances. The maximum length of these attributes is 255 characters. 
     * @param {string} [businessKey] Specify the business key of the workflow instance, in UTF-8 encoding. The business key of a workflow instance is limited to 255 characters.
     * @param {string} [attributesExampleCustomAttribute] Example of a parameter that filters workflow instances by the value of the custom workflow attribute with the ID \&#39;ExampleCustomAttribute\&#39;. You can specify parameters for other attributes in an analogous way. If you specify a parameter several times, the logical operators apply as outlined in the overall description of this API. If custom workflow attributes with different IDs are present in the URL, only workflow instances which contain all of them with the values specified will be returned as a response to the request. If a query by custom workflow attributes matches too many workflow definitions, you have to limit the query further. Refer, for example, to parameter \&#39;definitionId\&#39;. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesGet($orderby?: 'id asc' | 'id desc' | 'definitionId asc' | 'definitionId desc' | 'definitionVersion asc' | 'definitionVersion desc' | 'startedAt asc' | 'startedAt desc' | 'completedAt asc' | 'completedAt desc' | 'startedBy asc' | 'startedBy desc' | 'subject asc' | 'subject desc' | 'businessKey asc' | 'businessKey desc', $skip?: number, $top?: number, $inlinecount?: 'allpages' | 'none', $expand?: 'attributes', id?: string, definitionId?: string, definitionVersion?: string, status?: 'RUNNING' | 'ERRONEOUS' | 'SUSPENDED' | 'CANCELED' | 'COMPLETED', startedAt?: string, startedFrom?: string, startedUpTo?: string, completedAt?: string, completedFrom?: string, completedUpTo?: string, startedBy?: string, subject?: string, containsText?: string, businessKey?: string, attributesExampleCustomAttribute?: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesGet($orderby, $skip, $top, $inlinecount, $expand, id, definitionId, definitionVersion, status, startedAt, startedFrom, startedUpTo, completedAt, completedFrom, completedUpTo, startedBy, subject, containsText, businessKey, attributesExampleCustomAttribute, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the given workflow instances according to the specified operations. Currently, the only operation supported is the deletion of workflow instances. You can at most specify 10000 instances to delete in one API call.  Roles permitted to execute this operation: - Global roles: WorkflowTenantOperator - Scope: WORKFLOW_INSTANCES_UPDATE
     * @summary Delete instance by ID
     * @param {Array<WorkflowInstancesUpdatePayload>} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesPatch(body: Array<WorkflowInstancesUpdatePayload>, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesPatch(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Starts a new workflow instance of the provided workflow definition. Specify the ID of the workflow definition in the body. The workflow instance automatically starts based on the latest deployed version of the definition.  Roles permitted to execute this operation:  - Global roles: WorkflowInitiator  - Scope: WORKFLOW_INSTANCE_START 
     * @summary Start a new instance
     * @param {WorkflowInstanceStartPayload} body Specify the request body according to the given schema. Note that the length of the request body is limited to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesPost(body: WorkflowInstanceStartPayload, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesPost(body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the attachments information for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ATTACHMENTS
     * @summary Retrieve instance attachments
     * @param {string} workflowInstanceId The workflow instance ID for which the attachments should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet(workflowInstanceId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdAttachmentsGet(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Overrides the attachments information for a workflow instance independent of its status.  Take special care when using this API, because it will override the workflow attachments, that is, it might change the workflow   in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ATTACHMENTS
     * @summary Overwrite instance attachments
     * @param {string} workflowInstanceId Specify the workflow instance ID for which the attachments should be overridden. The workflow instance ID is 36 characters long.
     * @param {AttachmentsContext} body Specify the new information according to the given schema.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut(workflowInstanceId: string, body: AttachmentsContext, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdAttachmentsPut(workflowInstanceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves custom workflow attributes for a workflow instance. Labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.] - Scope: WORKFLOW_INSTANCE_GET_ATTRIBUTES 
     * @summary Retrieve custom workflow attributes by workflow instance ID
     * @param {string} workflowInstanceId The ID of the workflow instance for which the custom workflow attributes should be retrieved. The ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdAttributesGet(workflowInstanceId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdAttributesGet(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * **Warning: Users with the role \"WorkflowAdmin\" are no longer able to view the workflow context. To allow these users to continue to view the context, assign the role \"WorkflowContextViewer\" to them.**  Retrieves the context for a workflow instance independent of its status.   Roles permitted to execute this operation:   - Global roles: WorkflowContextViewer, WorkflowContextAdmin  - Instance-specific roles: contextViewerUsers, contextViewerGroups, contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_CONTEXT
     * @summary Retrieve instance context
     * @param {string} workflowInstanceId The workflow instance ID for which the context should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdContextGet(workflowInstanceId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdContextGet(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies parts of the context for a workflow instance independent of its status.  Take special care when using this API, because it might change the workflow context in ways that are incompatible with the expectations  of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and make sure that  the execution has come to a halt, that is, that no further steps are being added to the execution log. Refer to PATCH on the parent resource  and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
     * @summary Update instance context
     * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be modified. The workflow instance ID is 36 characters long.
     * @param {object} body Specify the modified parts of the context. Note that the modification is limited by the allowed content length of the request body. The length is restricted to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdContextPatch(workflowInstanceId: string, body: object, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdContextPatch(workflowInstanceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Overrides the context for a workflow instance independent of its status.   Take special care when using this API, because it will override the workflow context, that is, it might change the workflow context  in ways that are incompatible with the expectations of the tasks in the workflow definition. Before changing the context, we recommend that you suspend the workflow instance and check that the execution has come to a halt, that is, no further steps are being added to the execution log.  Refer to PATCH on the parent resource and GET on the \'execution-logs\' sibling resource.  Roles permitted to execute this operation:   - Global roles: WorkflowContextAdmin  - Instance-specific roles: contextAdminUsers, contextAdminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_CONTEXT
     * @summary Overwrite instance context
     * @param {string} workflowInstanceId Specify the workflow instance ID for which the context should be overridden. The workflow instance ID is 36 characters long.
     * @param {object} body Specify the new context according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdContextPut(workflowInstanceId: string, body: object, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdContextPut(workflowInstanceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves current error messages for a workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowDeveloper, WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ERROR_MESSAGES 
     * @summary Retrieve error messages
     * @param {string} workflowInstanceId The workflow instance ID for which the error messages should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet(workflowInstanceId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdErrorMessagesGet(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves execution logs for a given workflow instance.  Roles permitted to execute this operation:   - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_EXECUTION_LOGS 
     * @summary Retrieve execution logs
     * @param {string} workflowInstanceId The workflow instance ID for which the execution logs should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet(workflowInstanceId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdExecutionLogsGet(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the workflow instance with the specified workflow instance ID.  Roles permitted to execute this operation:  - Global roles: WorkflowViewer, WorkflowAdmin  - Instance-specific roles: viewerUsers, viewerGroups, adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET
     * @summary Retrieve workflow instance by ID
     * @param {string} workflowInstanceId The ID of the workflow instance, which should be retrieved. The workflow instance ID is 36 characters long.
     * @param {'attributes'} [$expand] You can request custom workflow attributes to become part of the workflow instance output by specifying the value \&#39;attributes\&#39; for the \&#39;$expand\&#39; parameter. Otherwise, if the \&#39;$expand\&#39; parameter is not specified, the \&#39;attributes\&#39; field is not included into the output of the workflow instance. Note that labels as well as the order of the custom workflow attributes in which they are returned, are taken from the latest versions of the workflow definitions where these attributes are present. 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdGet(workflowInstanceId: string, $expand?: 'attributes', options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdGet(workflowInstanceId, $expand, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Modifies the properties of a given workflow instance, for example, sets its status to CANCELED or RUNNING.  Status change effects may not take effect immediately, due to asynchronous processing of the request. When you change the status to CANCELED, note the following:  * Workflow instances in CANCELED status are considered final, that is, no further changes are allowed. This is valid as well for other APIs and the processing according to the workflow definition.  * Workflow instances in CANCELED status stop processing as soon as the system allows.  When you are changing the status to SUSPENDED, note the following:  * Status SUSPENDED manually and temporarily suspends processing.  * Workflow instances in SUSPENDED status stop processing as soon as the system allows.  * Workflow instances remain in SUSPENDED status until a status change to RUNNING or CANCELED is requested.  * While the workflow instance status reported by the respective API might change with immediate effect, follow-up actions might only be successful, after asynchronous processing within the workflow instance actually has stopped. To check whether asynchronous processing is ongoing, analyze the execution logs or check the workflow definition structure.  When you are changing the status to RUNNING, note the following:  * For workflow instances in ERRONEOUS status, this retries the failed activities. If these activities continue failing, the workflow instance automatically moves again into ERRONEOUS status.  * If the workflow instance had previously been suspended while in ERRONEOUS status, failed activities, such as service tasks, are retried.   Roles permitted to execute this operation:  - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scopes: WORKFLOW_INSTANCE_CANCEL, WORKFLOW_INSTANCE_RETRY_RESUME, WORKFLOW_INSTANCE_SUSPEND
     * @summary Update instance
     * @param {string} workflowInstanceId The ID of the workflow instance, which should be modified. The workflow instance ID is 36 characters long.
     * @param {WorkflowInstanceUpdatePayload} body 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdPatch(workflowInstanceId: string, body: WorkflowInstanceUpdatePayload, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdPatch(workflowInstanceId, body, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Retrieves the instance-specific role assignments of the given workflow instance.   Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_GET_ROLES 
     * @summary Retrieve instance roles
     * @param {string} workflowInstanceId The workflow instance ID for which the roles should be retrieved. The workflow instance ID is 36 characters long.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdRolesGet(workflowInstanceId: string, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdRolesGet(workflowInstanceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Updates the instance-specific role assignments of the given workflow instance.  Any of the role assignment properties that is present in the request body will overwrite the existing assignments with the new assignments. Any properties that are either null or not present at all in the request body will leave the corresponding role assignments unchanged.  The maximum number of users and groups that can be assigned to each role is limited to 100.  The use of expressions as part of the role assignments (e.g. ${context.variable}) is only allowed for workflow instances that are not yet COMPLETED or CANCELED.  Roles permitted to execute this operation:   - Global roles: WorkflowAdmin  - Instance-specific roles: adminUsers, adminGroups [Prerequisite: You are assigned to the WorkflowParticipant global role.]  - Scope: WORKFLOW_INSTANCE_UPDATE_ROLES  Examples: - Setting **viewerUsers: \"UserId1, UserId8\"** will remove all existing user assignments of the viewer role and then assign   only the two specified users to the role. - Setting **viewerUsers: \"\"** will remove all existing user assignments of the viewer role. - Specifying any non-null **viewerUsers** in the request body and leaving out **viewerGroups** will update the user   assignments and leave the group assignments unchanged.
     * @summary Update instance roles
     * @param {string} workflowInstanceId The workflow instance ID for which the role assignments should be updated. The workflow instance ID is 36 characters long.
     * @param {WorkflowInstanceRolesUpdatePayload} body Specify new role assignments.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SapCpWorkflowCfApi
     */
    public v1WorkflowInstancesWorkflowInstanceIdRolesPatch(workflowInstanceId: string, body: WorkflowInstanceRolesUpdatePayload, options?: any) {
        return SapCpWorkflowCfApiFp(this.configuration).v1WorkflowInstancesWorkflowInstanceIdRolesPatch(workflowInstanceId, body, options).then((request) => request(this.axios, this.basePath));
    }
}
