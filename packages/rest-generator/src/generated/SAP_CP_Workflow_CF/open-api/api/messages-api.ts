/* tslint:disable */
/* eslint-disable */
/**
 * Workflow API for Cloud Foundry
 * This API uses the SAP Cloud Platform Workflow service. With the API, you can, for example, start new workflow instances and work with tasks.  Note (relevant only for SAP API Business Hub): For authentication purposes, the API uses OAuth 2.0 security (with JSON Web Token, JWT). Thus, \"Try Out\" only works with an explicitly configured environment. For more information on how to obtain the necessary parameters, please see [Determine Service Configuration Parameters](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/abb1f66b2c3b4983b6b656654cfc3d2b.html) in the documentation. The OAuth client you use must have [extended scopes](https://help.sap.com/viewer/e157c391253b4ecd93647bf232d18a83/Cloud/en-US/baf2847f6d1c401a83ca3a1427b8ff84.html).  Note: These APIs are designed for loosely coupled clients. This means:  - If workflow service adds fields to responses, the API version number does not increase. Your client must ignore new fields. - The order of fields in responses and of entries in arrays may change. This applies unless the API provides an explicit means to specify the desired order. 
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ConflictError } from '../model';
// @ts-ignore
import { ConsumingWorkflowInstance } from '../model';
// @ts-ignore
import { SendMessagePayload } from '../model';
// @ts-ignore
import { TechnicalError } from '../model';
// @ts-ignore
import { UnauthorizedError } from '../model';
/**
 * MessagesApi - axios parameter creator
 * @export
 */
export const MessagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Sends a message to a set of workflow instances for consumption in intermediate message events. The message is identified by the name specified in the workflow model (request body parameter \'definitionId\')  and parameters identifying the workflow instances that should consume the message.   The message is consumed by the workflow instances that match the following criteria:  * The instance can be a specific match when using its workflow instance ID (request body parameter \'workflowInstanceId\').  Or the instance is a generic match when using the ID of the workflow model together with the business key (request body parameters \'workflowDefinitionId\' respectively \'businessKey\'). You can either use the specific or generic match but not both in the same call.  * The workflow instance is not in the SUSPENDED state.  * The workflow instance currently waits at the intermediate message event referring to the specified message.  The business key of a workflow instance matches if the business key specified in the request body is the same.    Roles permitted to execute this operation:  - Global roles:  WorkflowMessageSender  - Scope: MESSAGE_SEND
         * @summary Send message
         * @param {SendMessagePayload} body Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MessagesPost: async (body: SendMessagePayload, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body','Required parameter body was null or undefined when calling v1MessagesPost.');
            }
            const localVarPath = `/v1/messages/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication Oauth2_AuthorizationCode required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_AuthorizationCode", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }

            // authentication Oauth2_ClientCredentials required
            // oauth required
            if (configuration && configuration.accessToken) {
                const localVarAccessTokenValue = typeof configuration.accessToken === 'function'
                    ? await configuration.accessToken("Oauth2_ClientCredentials", [])
                    : await configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + localVarAccessTokenValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MessagesApi - functional programming interface
 * @export
 */
export const MessagesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Sends a message to a set of workflow instances for consumption in intermediate message events. The message is identified by the name specified in the workflow model (request body parameter \'definitionId\')  and parameters identifying the workflow instances that should consume the message.   The message is consumed by the workflow instances that match the following criteria:  * The instance can be a specific match when using its workflow instance ID (request body parameter \'workflowInstanceId\').  Or the instance is a generic match when using the ID of the workflow model together with the business key (request body parameters \'workflowDefinitionId\' respectively \'businessKey\'). You can either use the specific or generic match but not both in the same call.  * The workflow instance is not in the SUSPENDED state.  * The workflow instance currently waits at the intermediate message event referring to the specified message.  The business key of a workflow instance matches if the business key specified in the request body is the same.    Roles permitted to execute this operation:  - Global roles:  WorkflowMessageSender  - Scope: MESSAGE_SEND
         * @summary Send message
         * @param {SendMessagePayload} body Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async v1MessagesPost(body: SendMessagePayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ConsumingWorkflowInstance>>> {
            const localVarAxiosArgs = await MessagesApiAxiosParamCreator(configuration).v1MessagesPost(body, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MessagesApi - factory interface
 * @export
 */
export const MessagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Sends a message to a set of workflow instances for consumption in intermediate message events. The message is identified by the name specified in the workflow model (request body parameter \'definitionId\')  and parameters identifying the workflow instances that should consume the message.   The message is consumed by the workflow instances that match the following criteria:  * The instance can be a specific match when using its workflow instance ID (request body parameter \'workflowInstanceId\').  Or the instance is a generic match when using the ID of the workflow model together with the business key (request body parameters \'workflowDefinitionId\' respectively \'businessKey\'). You can either use the specific or generic match but not both in the same call.  * The workflow instance is not in the SUSPENDED state.  * The workflow instance currently waits at the intermediate message event referring to the specified message.  The business key of a workflow instance matches if the business key specified in the request body is the same.    Roles permitted to execute this operation:  - Global roles:  WorkflowMessageSender  - Scope: MESSAGE_SEND
         * @summary Send message
         * @param {SendMessagePayload} body Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        v1MessagesPost(body: SendMessagePayload, options?: any): AxiosPromise<Array<ConsumingWorkflowInstance>> {
            return MessagesApiFp(configuration).v1MessagesPost(body, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MessagesApi - object-oriented interface
 * @export
 * @class MessagesApi
 * @extends {BaseAPI}
 */
export class MessagesApi extends BaseAPI {
    /**
     * Sends a message to a set of workflow instances for consumption in intermediate message events. The message is identified by the name specified in the workflow model (request body parameter \'definitionId\')  and parameters identifying the workflow instances that should consume the message.   The message is consumed by the workflow instances that match the following criteria:  * The instance can be a specific match when using its workflow instance ID (request body parameter \'workflowInstanceId\').  Or the instance is a generic match when using the ID of the workflow model together with the business key (request body parameters \'workflowDefinitionId\' respectively \'businessKey\'). You can either use the specific or generic match but not both in the same call.  * The workflow instance is not in the SUSPENDED state.  * The workflow instance currently waits at the intermediate message event referring to the specified message.  The business key of a workflow instance matches if the business key specified in the request body is the same.    Roles permitted to execute this operation:  - Global roles:  WorkflowMessageSender  - Scope: MESSAGE_SEND
     * @summary Send message
     * @param {SendMessagePayload} body Specify the request body according to the given schema. The length of the request body is limited to ensure optimal operation of the service.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MessagesApi
     */
    public v1MessagesPost(body: SendMessagePayload, options?: any) {
        return MessagesApiFp(this.configuration).v1MessagesPost(body, options).then((request) => request(this.axios, this.basePath));
    }
}
